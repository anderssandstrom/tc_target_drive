<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="EL2819" Id="{f53f1521-ea95-4522-96ee-49d4e6c1f88a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EL2819
VAR_INPUT
    En              : BOOL;
    iTerminal_ID    : INT;
    ErrorSystem     : POINTER TO ST_ErrorSystem;
END_VAR

VAR_OUTPUT
    EnO     : BOOL;
    bError  : BOOL;
	sErrorMessage       : STRING;
END_VAR

VAR
    wCH1_Diag       AT %I*  : BYTE;
    wCH2_Diag       AT %I*  : BYTE;
    wCH3_Diag       AT %I*  : BYTE;
    wCH4_Diag       AT %I*  : BYTE;
    wCH5_Diag       AT %I*  : BYTE;
    wCH6_Diag       AT %I*  : BYTE;
    wCH7_Diag       AT %I*  : BYTE;
    wCH8_Diag       AT %I*  : BYTE;
    wCH9_Diag       AT %I*  : BYTE;
    wCH10_Diag      AT %I*  : BYTE;
    wCH11_Diag      AT %I*  : BYTE;
    wCH12_Diag      AT %I*  : BYTE;
    wCH13_Diag      AT %I*  : BYTE;
    wCH14_Diag      AT %I*  : BYTE;
    wCH15_Diag      AT %I*  : BYTE;
    wCH16_Diag      AT %I*  : BYTE;

    bDev_CommonFault            AT %I*  : BOOL;
    bDev_Overtemperature        AT %I*  : BOOL;
    bDev_UnderVoltage           AT %I*  : BOOL;
    bDev_MissingVoltage         AT %I*  : BOOL;

    WcState_WcState     AT %I*  : BOOL;
    InfoData_State      AT %I*  : UINT;

    //FB-s
    EL2819_Error    : FB_TerminalError;

    CH1_Error       : FB_GenericError;
    CH2_Error       : FB_GenericError;
    CH3_Error       : FB_GenericError;
    CH4_Error       : FB_GenericError;
    CH5_Error       : FB_GenericError;
    CH6_Error       : FB_GenericError;
    CH7_Error       : FB_GenericError;
    CH8_Error       : FB_GenericError;
    CH9_Error       : FB_GenericError;
    CH10_Error      : FB_GenericError;
    CH11_Error      : FB_GenericError;
    CH12_Error      : FB_GenericError;
    CH13_Error      : FB_GenericError;
    CH14_Error      : FB_GenericError;
    CH15_Error      : FB_GenericError;
    CH16_Error      : FB_GenericError;

    DEV_Error       : FB_GenericError;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
* TODO: test on hardware
*)

EnO:=En;

IF En THEN
    //Channel #1 Diag
    IF (wCH1_Diag AND 16#07) <> 0 THEN
        CH1_Error.sErrorMessage := 'EL2819 Channel #1: ';
        IF wCH1_Diag.0  THEN    CH1_Error.sErrorMessage := CONCAT(CH1_Error.sErrorMessage, 'Overtemperature; ');            IF CH1_Error.ErrorPriority > 10  OR CH1_Error.ErrorPriority = 0     THEN CH1_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH1_Diag.1  THEN    CH1_Error.sErrorMessage := CONCAT(CH1_Error.sErrorMessage, 'Open Load; ');                  IF CH1_Error.ErrorPriority > 100 OR CH1_Error.ErrorPriority = 0     THEN CH1_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH1_Diag.2  THEN    CH1_Error.sErrorMessage := CONCAT(CH1_Error.sErrorMessage, 'Overcurrent; ');                IF CH1_Error.ErrorPriority > 10  OR CH1_Error.ErrorPriority = 0     THEN CH1_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH1_Diag.3  THEN    CH1_Error.sErrorMessage := CONCAT(CH1_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH1_Error.ErrorPriority > 10  OR CH1_Error.ErrorPriority = 0     THEN CH1_Error.ErrorPriority := 10;     END_IF      END_IF
        CH1_Error.bError := TRUE;
    ELSE
        CH1_Error.bError := FALSE;
        CH1_Error.sErrorMessage := '';
    END_IF

    //Channel #2 Diag
    IF (wCH2_Diag AND 16#07) <> 0 THEN
        CH2_Error.sErrorMessage := 'EL2819 Channel #2: ';
        IF wCH2_Diag.0  THEN    CH2_Error.sErrorMessage := CONCAT(CH2_Error.sErrorMessage, 'Overtemperature; ');            IF CH2_Error.ErrorPriority > 10  OR CH2_Error.ErrorPriority = 0     THEN CH2_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH2_Diag.1  THEN    CH2_Error.sErrorMessage := CONCAT(CH2_Error.sErrorMessage, 'Open Load; ');                  IF CH2_Error.ErrorPriority > 100 OR CH2_Error.ErrorPriority = 0     THEN CH2_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH2_Diag.2  THEN    CH2_Error.sErrorMessage := CONCAT(CH2_Error.sErrorMessage, 'Overcurrent; ');                IF CH2_Error.ErrorPriority > 10  OR CH2_Error.ErrorPriority = 0     THEN CH2_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH2_Diag.3  THEN    CH2_Error.sErrorMessage := CONCAT(CH2_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH2_Error.ErrorPriority > 10  OR CH2_Error.ErrorPriority = 0     THEN CH2_Error.ErrorPriority := 10;     END_IF      END_IF
        CH2_Error.bError := TRUE;
    ELSE
        CH2_Error.bError := FALSE;
        CH2_Error.sErrorMessage := '';
    END_IF

    //Channel #3 Diag
    IF wCH3_Diag <> 0 THEN
        CH3_Error.sErrorMessage := 'EL2819 Channel #3: ';
        IF wCH3_Diag.0  THEN    CH3_Error.sErrorMessage := CONCAT(CH3_Error.sErrorMessage, 'Overtemperature; ');            IF CH3_Error.ErrorPriority > 10  OR CH3_Error.ErrorPriority = 0     THEN CH3_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH3_Diag.1  THEN    CH3_Error.sErrorMessage := CONCAT(CH3_Error.sErrorMessage, 'Open Load; ');                  IF CH3_Error.ErrorPriority > 100 OR CH3_Error.ErrorPriority = 0     THEN CH3_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH3_Diag.2  THEN    CH3_Error.sErrorMessage := CONCAT(CH3_Error.sErrorMessage, 'Overcurrent; ');                IF CH3_Error.ErrorPriority > 10  OR CH3_Error.ErrorPriority = 0     THEN CH3_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH3_Diag.3  THEN    CH3_Error.sErrorMessage := CONCAT(CH3_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH3_Error.ErrorPriority > 10  OR CH3_Error.ErrorPriority = 0     THEN CH3_Error.ErrorPriority := 10;     END_IF      END_IF
        CH3_Error.bError := TRUE;
    ELSE
        CH3_Error.bError := FALSE;
        CH3_Error.sErrorMessage := '';
    END_IF

    //Channel #4 Diag
    IF wCH4_Diag <> 0 THEN
        CH4_Error.sErrorMessage := 'EL2819 Channel #4: ';
        IF wCH4_Diag.0  THEN    CH4_Error.sErrorMessage := CONCAT(CH4_Error.sErrorMessage, 'Overtemperature; ');            IF CH4_Error.ErrorPriority > 10  OR CH4_Error.ErrorPriority = 0     THEN CH4_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH4_Diag.1  THEN    CH4_Error.sErrorMessage := CONCAT(CH4_Error.sErrorMessage, 'Open Load; ');                  IF CH4_Error.ErrorPriority > 100 OR CH4_Error.ErrorPriority = 0     THEN CH4_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH4_Diag.2  THEN    CH4_Error.sErrorMessage := CONCAT(CH4_Error.sErrorMessage, 'Overcurrent; ');                IF CH4_Error.ErrorPriority > 10  OR CH4_Error.ErrorPriority = 0     THEN CH4_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH4_Diag.3  THEN    CH4_Error.sErrorMessage := CONCAT(CH4_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH4_Error.ErrorPriority > 10  OR CH4_Error.ErrorPriority = 0     THEN CH4_Error.ErrorPriority := 10;     END_IF      END_IF
        CH4_Error.bError := TRUE;
    ELSE
        CH4_Error.bError := FALSE;
        CH4_Error.sErrorMessage := '';
    END_IF

    //Channel #5 Diag
    IF wCH5_Diag <> 0 THEN
        CH5_Error.sErrorMessage := 'EL2819 Channel #5: ';
        IF wCH5_Diag.0  THEN    CH5_Error.sErrorMessage := CONCAT(CH5_Error.sErrorMessage, 'Overtemperature; ');            IF CH5_Error.ErrorPriority > 10  OR CH5_Error.ErrorPriority = 0     THEN CH5_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH5_Diag.1  THEN    CH5_Error.sErrorMessage := CONCAT(CH5_Error.sErrorMessage, 'Open Load; ');                  IF CH5_Error.ErrorPriority > 100 OR CH5_Error.ErrorPriority = 0     THEN CH5_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH5_Diag.2  THEN    CH5_Error.sErrorMessage := CONCAT(CH5_Error.sErrorMessage, 'Overcurrent; ');                IF CH5_Error.ErrorPriority > 10  OR CH5_Error.ErrorPriority = 0     THEN CH5_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH5_Diag.3  THEN    CH5_Error.sErrorMessage := CONCAT(CH5_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH5_Error.ErrorPriority > 10  OR CH5_Error.ErrorPriority = 0     THEN CH5_Error.ErrorPriority := 10;     END_IF      END_IF
        CH5_Error.bError := TRUE;
    ELSE
        CH5_Error.bError := FALSE;
        CH5_Error.sErrorMessage := '';
    END_IF

    //Channel #6 Diag
    IF wCH6_Diag <> 0 THEN
        CH6_Error.sErrorMessage := 'EL2819 Channel #6: ';
        IF wCH6_Diag.0  THEN    CH6_Error.sErrorMessage := CONCAT(CH6_Error.sErrorMessage, 'Overtemperature; ');            IF CH6_Error.ErrorPriority > 10  OR CH6_Error.ErrorPriority = 0     THEN CH6_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH6_Diag.1  THEN    CH6_Error.sErrorMessage := CONCAT(CH6_Error.sErrorMessage, 'Open Load; ');                  IF CH6_Error.ErrorPriority > 100 OR CH6_Error.ErrorPriority = 0     THEN CH6_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH6_Diag.2  THEN    CH6_Error.sErrorMessage := CONCAT(CH6_Error.sErrorMessage, 'Overcurrent; ');                IF CH6_Error.ErrorPriority > 10  OR CH6_Error.ErrorPriority = 0     THEN CH6_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH6_Diag.3  THEN    CH6_Error.sErrorMessage := CONCAT(CH6_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH6_Error.ErrorPriority > 10  OR CH6_Error.ErrorPriority = 0     THEN CH6_Error.ErrorPriority := 10;     END_IF      END_IF
        CH6_Error.bError := TRUE;
    ELSE
        CH6_Error.bError := FALSE;
        CH6_Error.sErrorMessage := '';
    END_IF

    //Channel #7 Diag
    IF wCH7_Diag <> 0 THEN
        CH7_Error.sErrorMessage := 'EL2819 Channel #7: ';
        IF wCH7_Diag.0  THEN    CH7_Error.sErrorMessage := CONCAT(CH7_Error.sErrorMessage, 'Overtemperature; ');            IF CH7_Error.ErrorPriority > 10  OR CH7_Error.ErrorPriority = 0     THEN CH7_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH7_Diag.1  THEN    CH7_Error.sErrorMessage := CONCAT(CH7_Error.sErrorMessage, 'Open Load; ');                  IF CH7_Error.ErrorPriority > 100 OR CH7_Error.ErrorPriority = 0     THEN CH7_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH7_Diag.2  THEN    CH7_Error.sErrorMessage := CONCAT(CH7_Error.sErrorMessage, 'Overcurrent; ');                IF CH7_Error.ErrorPriority > 10  OR CH7_Error.ErrorPriority = 0     THEN CH7_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH7_Diag.3  THEN    CH7_Error.sErrorMessage := CONCAT(CH7_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH7_Error.ErrorPriority > 10  OR CH7_Error.ErrorPriority = 0     THEN CH7_Error.ErrorPriority := 10;     END_IF      END_IF
        CH7_Error.bError := TRUE;
    ELSE
        CH7_Error.bError := FALSE;
        CH7_Error.sErrorMessage := '';
    END_IF

    //Channel #8 Diag
    IF wCH8_Diag <> 0 THEN
        CH8_Error.sErrorMessage := 'EL2819 Channel #8: ';
        IF wCH8_Diag.0  THEN    CH8_Error.sErrorMessage := CONCAT(CH8_Error.sErrorMessage, 'Overtemperature; ');            IF CH8_Error.ErrorPriority > 10  OR CH8_Error.ErrorPriority = 0     THEN CH8_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH8_Diag.1  THEN    CH8_Error.sErrorMessage := CONCAT(CH8_Error.sErrorMessage, 'Open Load; ');                  IF CH8_Error.ErrorPriority > 100 OR CH8_Error.ErrorPriority = 0     THEN CH8_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH8_Diag.2  THEN    CH8_Error.sErrorMessage := CONCAT(CH8_Error.sErrorMessage, 'Overcurrent; ');                IF CH8_Error.ErrorPriority > 10  OR CH8_Error.ErrorPriority = 0     THEN CH8_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH8_Diag.3  THEN    CH8_Error.sErrorMessage := CONCAT(CH8_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH8_Error.ErrorPriority > 10  OR CH8_Error.ErrorPriority = 0     THEN CH8_Error.ErrorPriority := 10;     END_IF      END_IF
        CH8_Error.bError := TRUE;
    ELSE
        CH8_Error.bError := FALSE;
        CH8_Error.sErrorMessage := '';
    END_IF

    //Channel #9 Diag
    IF wCH9_Diag <> 0 THEN
        CH9_Error.sErrorMessage := 'EL2819 Channel #9: ';
        IF wCH9_Diag.0  THEN    CH9_Error.sErrorMessage := CONCAT(CH9_Error.sErrorMessage, 'Overtemperature; ');            IF CH9_Error.ErrorPriority > 10  OR CH9_Error.ErrorPriority = 0     THEN CH9_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH9_Diag.1  THEN    CH9_Error.sErrorMessage := CONCAT(CH9_Error.sErrorMessage, 'Open Load; ');                  IF CH9_Error.ErrorPriority > 100 OR CH9_Error.ErrorPriority = 0     THEN CH9_Error.ErrorPriority := 100;    END_IF      END_IF
        IF wCH9_Diag.2  THEN    CH9_Error.sErrorMessage := CONCAT(CH9_Error.sErrorMessage, 'Overcurrent; ');                IF CH9_Error.ErrorPriority > 10  OR CH9_Error.ErrorPriority = 0     THEN CH9_Error.ErrorPriority := 10;     END_IF      END_IF
        IF wCH9_Diag.3  THEN    CH9_Error.sErrorMessage := CONCAT(CH9_Error.sErrorMessage, 'Short Circuit to 24V; ');       IF CH9_Error.ErrorPriority > 10  OR CH9_Error.ErrorPriority = 0     THEN CH9_Error.ErrorPriority := 10;     END_IF      END_IF
        CH9_Error.bError := TRUE;
    ELSE
        CH9_Error.bError := FALSE;
        CH9_Error.sErrorMessage := '';
    END_IF

    //Channel #10 Diag
    IF wCH10_Diag <> 0 THEN
        CH10_Error.sErrorMessage := 'EL2819 Channel #10: ';
        IF wCH10_Diag.0     THEN    CH10_Error.sErrorMessage := CONCAT(CH10_Error.sErrorMessage, 'Overtemperature; ');          IF CH10_Error.ErrorPriority > 10  OR CH10_Error.ErrorPriority = 0   THEN CH10_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH10_Diag.1     THEN    CH10_Error.sErrorMessage := CONCAT(CH10_Error.sErrorMessage, 'Open Load; ');                IF CH10_Error.ErrorPriority > 100 OR CH10_Error.ErrorPriority = 0   THEN CH10_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH10_Diag.2     THEN    CH10_Error.sErrorMessage := CONCAT(CH10_Error.sErrorMessage, 'Overcurrent; ');              IF CH10_Error.ErrorPriority > 10  OR CH10_Error.ErrorPriority = 0   THEN CH10_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH10_Diag.3     THEN    CH10_Error.sErrorMessage := CONCAT(CH10_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH10_Error.ErrorPriority > 10  OR CH10_Error.ErrorPriority = 0   THEN CH10_Error.ErrorPriority := 10;    END_IF      END_IF
        CH10_Error.bError := TRUE;
    ELSE
        CH10_Error.bError := FALSE;
        CH10_Error.sErrorMessage := '';
    END_IF

    //Channel #11 Diag
    IF wCH11_Diag <> 0 THEN
        CH11_Error.sErrorMessage := 'EL2819 Channel #11: ';
        IF wCH11_Diag.0     THEN    CH11_Error.sErrorMessage := CONCAT(CH11_Error.sErrorMessage, 'Overtemperature; ');          IF CH11_Error.ErrorPriority > 10  OR CH11_Error.ErrorPriority = 0   THEN CH11_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH11_Diag.1     THEN    CH11_Error.sErrorMessage := CONCAT(CH11_Error.sErrorMessage, 'Open Load; ');                IF CH11_Error.ErrorPriority > 100 OR CH11_Error.ErrorPriority = 0   THEN CH11_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH11_Diag.2     THEN    CH11_Error.sErrorMessage := CONCAT(CH11_Error.sErrorMessage, 'Overcurrent; ');              IF CH11_Error.ErrorPriority > 10  OR CH11_Error.ErrorPriority = 0   THEN CH11_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH11_Diag.3     THEN    CH11_Error.sErrorMessage := CONCAT(CH11_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH11_Error.ErrorPriority > 10  OR CH11_Error.ErrorPriority = 0   THEN CH11_Error.ErrorPriority := 10;    END_IF      END_IF
        CH11_Error.bError := TRUE;
    ELSE
        CH11_Error.bError := FALSE;
        CH11_Error.sErrorMessage := '';
    END_IF

    //Channel #12 Diag
    IF wCH12_Diag <> 0 THEN
        CH12_Error.sErrorMessage := 'EL2819 Channel #12: ';
        IF wCH12_Diag.0     THEN    CH12_Error.sErrorMessage := CONCAT(CH12_Error.sErrorMessage, 'Overtemperature; ');          IF CH12_Error.ErrorPriority > 10  OR CH12_Error.ErrorPriority = 0   THEN CH12_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH12_Diag.1     THEN    CH12_Error.sErrorMessage := CONCAT(CH12_Error.sErrorMessage, 'Open Load; ');                IF CH12_Error.ErrorPriority > 100 OR CH12_Error.ErrorPriority = 0   THEN CH12_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH12_Diag.2     THEN    CH12_Error.sErrorMessage := CONCAT(CH12_Error.sErrorMessage, 'Overcurrent; ');              IF CH12_Error.ErrorPriority > 10  OR CH12_Error.ErrorPriority = 0   THEN CH12_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH12_Diag.3     THEN    CH12_Error.sErrorMessage := CONCAT(CH12_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH12_Error.ErrorPriority > 10  OR CH12_Error.ErrorPriority = 0   THEN CH12_Error.ErrorPriority := 10;    END_IF      END_IF
        CH12_Error.bError := TRUE;
    ELSE
        CH12_Error.bError := FALSE;
        CH12_Error.sErrorMessage := '';
    END_IF

    //Channel #13 Diag
    IF wCH13_Diag <> 0 THEN
        CH13_Error.sErrorMessage := 'EL2819 Channel #13: ';
        IF wCH13_Diag.0     THEN    CH13_Error.sErrorMessage := CONCAT(CH13_Error.sErrorMessage, 'Overtemperature; ');          IF CH13_Error.ErrorPriority > 10  OR CH13_Error.ErrorPriority = 0   THEN CH13_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH13_Diag.1     THEN    CH13_Error.sErrorMessage := CONCAT(CH13_Error.sErrorMessage, 'Open Load; ');                IF CH13_Error.ErrorPriority > 100 OR CH13_Error.ErrorPriority = 0   THEN CH13_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH13_Diag.2     THEN    CH13_Error.sErrorMessage := CONCAT(CH13_Error.sErrorMessage, 'Overcurrent; ');              IF CH13_Error.ErrorPriority > 10  OR CH13_Error.ErrorPriority = 0   THEN CH13_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH13_Diag.3     THEN    CH13_Error.sErrorMessage := CONCAT(CH13_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH13_Error.ErrorPriority > 10  OR CH13_Error.ErrorPriority = 0   THEN CH13_Error.ErrorPriority := 10;    END_IF      END_IF
        CH13_Error.bError := TRUE;
    ELSE
        CH13_Error.bError := FALSE;
        CH13_Error.sErrorMessage := '';
    END_IF

    //Channel #14 Diag
    IF wCH14_Diag <> 0 THEN
        CH14_Error.sErrorMessage := 'EL2819 Channel #14: ';
        IF wCH14_Diag.0     THEN    CH14_Error.sErrorMessage := CONCAT(CH14_Error.sErrorMessage, 'Overtemperature; ');          IF CH14_Error.ErrorPriority > 10  OR CH14_Error.ErrorPriority = 0   THEN CH14_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH14_Diag.1     THEN    CH14_Error.sErrorMessage := CONCAT(CH14_Error.sErrorMessage, 'Open Load; ');                IF CH14_Error.ErrorPriority > 100 OR CH14_Error.ErrorPriority = 0   THEN CH14_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH14_Diag.2     THEN    CH14_Error.sErrorMessage := CONCAT(CH14_Error.sErrorMessage, 'Overcurrent; ');              IF CH14_Error.ErrorPriority > 10  OR CH14_Error.ErrorPriority = 0   THEN CH14_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH14_Diag.3     THEN    CH14_Error.sErrorMessage := CONCAT(CH14_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH14_Error.ErrorPriority > 10  OR CH14_Error.ErrorPriority = 0   THEN CH14_Error.ErrorPriority := 10;    END_IF      END_IF
        CH14_Error.bError := TRUE;
    ELSE
        CH14_Error.bError := FALSE;
        CH14_Error.sErrorMessage := '';
    END_IF

    //Channel #15 Diag
    IF wCH15_Diag <> 0 THEN
        CH15_Error.sErrorMessage := 'EL2819 Channel #15: ';
        IF wCH15_Diag.0     THEN    CH15_Error.sErrorMessage := CONCAT(CH15_Error.sErrorMessage, 'Overtemperature; ');          IF CH15_Error.ErrorPriority > 10  OR CH15_Error.ErrorPriority = 0   THEN CH15_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH15_Diag.1     THEN    CH15_Error.sErrorMessage := CONCAT(CH15_Error.sErrorMessage, 'Open Load; ');                IF CH15_Error.ErrorPriority > 100 OR CH15_Error.ErrorPriority = 0   THEN CH15_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH15_Diag.2     THEN    CH15_Error.sErrorMessage := CONCAT(CH15_Error.sErrorMessage, 'Overcurrent; ');              IF CH15_Error.ErrorPriority > 10  OR CH15_Error.ErrorPriority = 0   THEN CH15_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH15_Diag.3     THEN    CH15_Error.sErrorMessage := CONCAT(CH15_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH15_Error.ErrorPriority > 10  OR CH15_Error.ErrorPriority = 0   THEN CH15_Error.ErrorPriority := 10;    END_IF      END_IF
        CH15_Error.bError := TRUE;
    ELSE
        CH15_Error.bError := FALSE;
        CH15_Error.sErrorMessage := '';
    END_IF

    //Channel #16 Diag
    IF wCH16_Diag <> 0 THEN
        CH16_Error.sErrorMessage := 'EL2819 Channel #16: ';
        IF wCH16_Diag.0     THEN    CH16_Error.sErrorMessage := CONCAT(CH16_Error.sErrorMessage, 'Overtemperature; ');          IF CH16_Error.ErrorPriority > 10  OR CH16_Error.ErrorPriority = 0   THEN CH16_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH16_Diag.1     THEN    CH16_Error.sErrorMessage := CONCAT(CH16_Error.sErrorMessage, 'Open Load; ');                IF CH16_Error.ErrorPriority > 100 OR CH16_Error.ErrorPriority = 0   THEN CH16_Error.ErrorPriority := 100;   END_IF      END_IF
        IF wCH16_Diag.2     THEN    CH16_Error.sErrorMessage := CONCAT(CH16_Error.sErrorMessage, 'Overcurrent; ');              IF CH16_Error.ErrorPriority > 10  OR CH16_Error.ErrorPriority = 0   THEN CH16_Error.ErrorPriority := 10;    END_IF      END_IF
        IF wCH16_Diag.3     THEN    CH16_Error.sErrorMessage := CONCAT(CH16_Error.sErrorMessage, 'Short Circuit to 24V; ');     IF CH16_Error.ErrorPriority > 10  OR CH16_Error.ErrorPriority = 0   THEN CH16_Error.ErrorPriority := 10;    END_IF      END_IF
        CH16_Error.bError := TRUE;
    ELSE
        CH16_Error.bError := FALSE;
        CH16_Error.sErrorMessage := '';
    END_IF

    //Device Diag
    IF bDev_CommonFault OR bDev_Overtemperature OR bDev_UnderVoltage OR bDev_MissingVoltage THEN
        DEV_Error.sErrorMessage := 'EL2819: ' ;
        IF bDev_CommonFault         THEN    DEV_Error.sErrorMessage := CONCAT(DEV_Error.sErrorMessage, 'Common Fault; ');               IF DEV_Error.ErrorPriority > 50  OR DEV_Error.ErrorPriority = 0 THEN DEV_Error.ErrorPriority := 50; END_IF      END_IF
        IF bDev_Overtemperature     THEN    DEV_Error.sErrorMessage := CONCAT(DEV_Error.sErrorMessage, 'Device Overtemperature; ');     IF DEV_Error.ErrorPriority > 10  OR DEV_Error.ErrorPriority = 0 THEN DEV_Error.ErrorPriority := 10; END_IF      END_IF
        IF bDev_UnderVoltage        THEN    DEV_Error.sErrorMessage := CONCAT(DEV_Error.sErrorMessage, 'Undervoltage; ');               IF DEV_Error.ErrorPriority > 10  OR DEV_Error.ErrorPriority = 0 THEN DEV_Error.ErrorPriority := 10; END_IF      END_IF
        IF bDev_MissingVoltage      THEN    DEV_Error.sErrorMessage := CONCAT(DEV_Error.sErrorMessage, 'Missing Voltage; ');            IF DEV_Error.ErrorPriority > 10  OR DEV_Error.ErrorPriority = 0 THEN DEV_Error.ErrorPriority := 10; END_IF      END_IF
        DEV_Error.bError := TRUE;
    ELSE
        DEV_Error.bError := FALSE;
        DEV_Error.sErrorMessage := '';
    END_IF

END_IF

//FB Instances
EL2819_Error(
    En                  := TRUE,
    iTerminal_ID        := iTerminal_ID,
    bWcState            := WcState_WcState,
    uiInfoData_State    := InfoData_State,
    pErrorSystem        := ErrorSystem,
    bError              => bError,
);

CH1_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH2_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH3_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH4_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH5_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH6_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH7_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH8_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH9_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH10_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH11_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH12_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH13_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH14_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH15_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

CH16_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

DEV_Error (
    En                  :=  En,
    bError              :=  ,
    sErrorMessage       :=  ,
    ErrorPriority       :=  ,
    iTerminal_ID        :=  iTerminal_ID,
    pErrorSystem        :=  ErrorSystem,
    EnO                 =>  ,
);

// Summary message
bError:=EL2819_Error.bError OR DEV_Error.bError OR CH1_Error.bError OR
CH2_Error.bError OR CH3_Error.bError OR CH4_Error.bError OR CH5_Error.bError OR
CH6_Error.bError OR CH7_Error.bError OR CH8_Error.bError OR CH9_Error.bError OR
CH10_Error.bError OR CH11_Error.bError OR CH12_Error.bError OR CH13_Error.bError OR
CH14_Error.bError OR CH15_Error.bError OR CH16_Error.bError;

IF bError THEN
  IF EL2819_Error.bError THEN
	sErrorMessage:=EL2819_Error.ErrorData.sErrorMessage;
  ELSIF DEV_Error.bError THEN
	sErrorMessage:=DEV_Error.sErrorMessage;
  ELSIF CH1_Error.bError THEN
	sErrorMessage:=CH1_Error.sErrorMessage;
  ELSIF CH2_Error.bError THEN
	sErrorMessage:=CH2_Error.sErrorMessage;
  ELSIF CH3_Error.bError THEN
	sErrorMessage:=CH3_Error.sErrorMessage;
  ELSIF CH4_Error.bError THEN
	sErrorMessage:=CH4_Error.sErrorMessage;
  ELSIF CH5_Error.bError THEN
	sErrorMessage:=CH5_Error.sErrorMessage;
  ELSIF CH6_Error.bError THEN
	sErrorMessage:=CH6_Error.sErrorMessage;
  ELSIF CH7_Error.bError THEN
	sErrorMessage:=CH7_Error.sErrorMessage;
  ELSIF CH8_Error.bError THEN
	sErrorMessage:=CH8_Error.sErrorMessage;
  ELSIF CH9_Error.bError THEN
	sErrorMessage:=CH9_Error.sErrorMessage;
  ELSIF CH10_Error.bError THEN
	sErrorMessage:=CH10_Error.sErrorMessage;
  ELSIF CH11_Error.bError THEN
	sErrorMessage:=CH11_Error.sErrorMessage;
  ELSIF CH12_Error.bError THEN
	sErrorMessage:=CH12_Error.sErrorMessage;
  ELSIF CH13_Error.bError THEN
	sErrorMessage:=CH13_Error.sErrorMessage;
  ELSIF CH14_Error.bError THEN
	sErrorMessage:=CH14_Error.sErrorMessage;
  ELSIF CH15_Error.bError THEN
	sErrorMessage:=CH15_Error.sErrorMessage;
  ELSIF CH16_Error.bError THEN
	sErrorMessage:=CH16_Error.sErrorMessage;
  ELSE
	sErrorMessage:='';
  END_IF
ELSE
  sErrorMessage:='';
END_IF




]]></ST>
    </Implementation>
    <LineIds Name="EL2819">
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="651" Count="0" />
      <LineId Id="157" Count="16" />
      <LineId Id="658" Count="2" />
      <LineId Id="177" Count="31" />
      <LineId Id="404" Count="0" />
      <LineId Id="406" Count="11" />
      <LineId Id="419" Count="11" />
      <LineId Id="405" Count="0" />
      <LineId Id="433" Count="5" />
      <LineId Id="784" Count="0" />
      <LineId Id="440" Count="4" />
      <LineId Id="432" Count="0" />
      <LineId Id="445" Count="11" />
      <LineId Id="209" Count="0" />
      <LineId Id="459" Count="7" />
      <LineId Id="471" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="458" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="474" Count="10" />
      <LineId Id="473" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="487" Count="10" />
      <LineId Id="486" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="501" Count="11" />
      <LineId Id="519" Count="12" />
      <LineId Id="518" Count="0" />
      <LineId Id="532" Count="10" />
      <LineId Id="500" Count="0" />
      <LineId Id="544" Count="11" />
      <LineId Id="543" Count="0" />
      <LineId Id="559" Count="11" />
      <LineId Id="558" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="846" Count="1" />
      <LineId Id="213" Count="8" />
      <LineId Id="655" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="720" Count="6" />
      <LineId Id="719" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="246" Count="38" />
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="7" />
      <LineId Id="295" Count="0" />
      <LineId Id="305" Count="8" />
      <LineId Id="304" Count="0" />
      <LineId Id="315" Count="8" />
      <LineId Id="314" Count="0" />
      <LineId Id="325" Count="8" />
      <LineId Id="324" Count="0" />
      <LineId Id="335" Count="8" />
      <LineId Id="334" Count="0" />
      <LineId Id="345" Count="8" />
      <LineId Id="344" Count="0" />
      <LineId Id="355" Count="8" />
      <LineId Id="354" Count="0" />
      <LineId Id="365" Count="8" />
      <LineId Id="364" Count="0" />
      <LineId Id="375" Count="8" />
      <LineId Id="374" Count="0" />
      <LineId Id="385" Count="8" />
      <LineId Id="384" Count="0" />
      <LineId Id="395" Count="8" />
      <LineId Id="394" Count="0" />
      <LineId Id="572" Count="8" />
      <LineId Id="571" Count="0" />
      <LineId Id="285" Count="8" />
      <LineId Id="12" Count="0" />
      <LineId Id="910" Count="1" />
      <LineId Id="963" Count="4" />
      <LineId Id="1034" Count="0" />
      <LineId Id="968" Count="0" />
      <LineId Id="912" Count="1" />
      <LineId Id="927" Count="1" />
      <LineId Id="914" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="930" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="932" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="934" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="941" Count="1" />
      <LineId Id="944" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="946" Count="0" />
      <LineId Id="945" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="954" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="956" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="962" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="1031" Count="1" />
      <LineId Id="909" Count="0" />
      <LineId Id="918" Count="3" />
      <LineId Id="917" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>