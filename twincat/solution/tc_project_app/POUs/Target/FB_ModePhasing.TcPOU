<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_ModePhasing" Id="{d2a3a91d-9b2d-4e1e-8e68-2aba1e8abe60}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModePhasing
VAR_INPUT
	bExecute           : BOOL         := FALSE;
	bReset             : BOOL         := FALSE;
	stStatus           : ST_AXIS_STATUS;
    dLatchedPosition   : DINT         := 0;
	//fPhaseOffsetDeg    : LREAL        := 0;
    fPhaseControlKp    : LREAL        := 0.0012;
	fPhaseControlKi    : LREAL        := 0.00015;
	fPhaseControlKd    : LREAL        := 0.0;
	fPhaseControlKff   : LREAL        := 0.0;
	fPhaseOffsetMM     : LREAL        := 0.0;
	fRefOffset         : LREAL        :=0;  //Offset from homing
	bPhaseControlReset : BOOL         := FALSE;
	ePhaseType         : E_PHASE_TYPE := E_PHASE_TYPE.PID;
	ePwmType           : E_PWM_TYPE   := E_PWM_TYPE.OPTIMIZED;
END_VAR
VAR_OUTPUT
	bError             : BOOL;
	nErrorId           : UDINT;
	sErrorStr          : STRING := GVL_ErrorCodes.nErrorCodeOKStr;
	bPhasing           : BOOL;
	fSpeedSetpoint     : LREAL;
END_VAR
VAR_IN_OUT
	stCommands         : ST_AXIS_COMMAND;
END_VAR
VAR
  bNewTriggPulse           : BOOL  := FALSE;
  bExecuteSuperImpose      : BOOL  := FALSE;
  bVeloStable              : BOOL  := FALSE;
  bPhaseAlgTrigg           : BOOL  := FALSE;
  nClosestSectorId         : INT   := 0;
  nPIDExeSkipCounter       : INT   := 0;
  iFiltVeloArrayIndex      : INT   := 0;
  i                        : INT   := 0;
  iRangeOKCounter          : INT   := 0;
  iRangeOKCounterOld       : INT   := 0;
  nChoosenSector           : INT   := 0;
  dLatchedPositionOld      : DINT  := 0;
  fLatchedPositionOld      : LREAL := 0;
  fDistBetweenLastPulses   : LREAL := 0;
  fLastSectorVelocity      : LREAL := 0;
  fLatchedPosition         : LREAL := 0;
  fPhaseError              : LREAL := 0;
  fPhaseErrorFiltered      : LREAL := 0;
  fPhaseErrorMM            : LREAL := 0;
  fLastSectorVelocityOld   : LREAL := 0;
  fMaxValue                : LREAL := 0;
  fMinValue                : LREAL := 0;
  fRange                   : LREAL := 0;
  fDeltaVelo               : LREAL := 0;
  fNomSpeedSetAdjust       : LREAL := 0;
  fPidAdd                  : LREAL := 0;
  fSpeedSetpointLocal      : LREAL := 0;
  fArrayFiltVelo           : ARRAY[ 0 ..35] OF LREAL;
  fArrayPhaseErrorFilt     : ARRAY[ 0 ..99] OF LREAL;
  fbPhasePID               : FB_PID;
  fbPWM                    : FB_PWM;
  fbSuperImpose            : FB_TargetSuperImpose;
  timerCheckLatchFreq      : TON;
  nMissedTimingPulses      : INT:=0;
  nMissedTimingPulsesOld   : INT:=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Function: 
// 1. Wait for stable velocity then start "phasing" (depending on ePhaseMode)
// 2. Choose sector for control
// 3. Calculate phase error (buffer several revs and filter)
// 4. Adjust velo setpoint to minimize phase error (PID)
// 5. PWM of the new velocity setpoint in order to increase resolution
// Note: Seems the indradrive can only hanlde 3 decimals (even if 4 is seen in interface and indradrive software)
// Author: Anders Sandström 2018

stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultVel;	
stCommands.fCommandAcceleration:= GVL_Parameters.fAccDefaultVel;
stCommands.eMotionMode :=e_Motion_mode.eJogPositive;
stCommands.eOperationMode:=e_Operation_mode_no.eSecondaryOpMode2;

bNewTriggPulse:=FALSE;
bPhasing:=FALSE;
fNomSpeedSetAdjust:=GVL_Parameters.fNominalSpeedRpm + GVL_Parameters.fNominalSpeedAdjust; // Adjust speed setpoint
bPhasing:=bPhaseAlgTrigg;

// Reset alg
IF NOT bExecute OR bPhaseControlReset THEN
  bPhaseAlgTrigg:=FALSE;
END_IF

fLatchedPositionOld:=fLatchedPosition;  // Backup old
fLatchedPosition:=DINT_TO_LREAL(dLatchedPosition)/10000.0-fRefOffset;  // remove homing offset
IF fLatchedPosition > 360 THEN
  fLatchedPosition:=fLatchedPosition - 360;	
END_IF
IF fLatchedPosition < 0 THEN
  fLatchedPosition:=fLatchedPosition + 360;	
END_IF

// New trigger from timing system
IF (fLatchedPosition-fLatchedPositionOld)<>0 THEN
  IF(fLatchedPositionOld>fLatchedPosition) THEN
	fDistBetweenLastPulses:=(360-fLatchedPositionOld+fLatchedPosition);
  ELSE
	fDistBetweenLastPulses:=fLatchedPosition-fLatchedPositionOld;
  END_IF
  bNewTriggPulse:=TRUE;
  fLastSectorVelocity:=fDistBetweenLastPulses*GVL_Parameters.nPulseFreqHz*60/360;
  nClosestSectorId:= LREAL_TO_INT(fLatchedPosition/10);
  
  // Check if stable velocity (close to nominal)	
  iRangeOKCounterOld:=iRangeOKCounter;
  fArrayFiltVelo[iFiltVeloArrayIndex]:=fLastSectorVelocity;
  iFiltVeloArrayIndex:=iFiltVeloArrayIndex+1;
  IF iFiltVeloArrayIndex>35 THEN
	iFiltVeloArrayIndex:=0;
  END_IF
  fLastSectorVelocityOld:=fLastSectorVelocity;
  fMaxValue:=fArrayFiltVelo[0];
  fMinValue:=fArrayFiltVelo[0];
  FOR i:=1 TO 35 BY 1 DO
    IF fArrayFiltVelo[i]> fMaxValue THEN
	  fMaxValue:=fArrayFiltVelo[i];  
    END_IF
    IF fArrayFiltVelo[i]< fMinValue THEN
      fMinValue:=fArrayFiltVelo[i];  
    END_IF
  END_FOR;
  fRange:=fMaxValue-fMinValue;
  IF fRange < GVL_Parameters.fPhaseSpeedTol AND 
     ABS(fNomSpeedSetAdjust-fMinValue) < GVL_Parameters.fPhaseSpeedTol AND  
     ABS(fNomSpeedSetAdjust-fMaxValue) < GVL_Parameters.fPhaseSpeedTol THEN
	IF iRangeOKCounter <= GVL_Parameters.nVeloInRangeCount THEN
      iRangeOKCounter:=iRangeOKCounter+1;
	END_IF
  ELSE
	iRangeOKCounter:=0; 
  END_IF
  bVeloStable:=iRangeOKCounter >= GVL_Parameters.nVeloInRangeCount;
  IF bVeloStable AND NOT bPhaseAlgTrigg (*AND bTEst*) THEN
    nChoosenSector:=nClosestSectorId-1;
    bPhaseAlgTrigg:=TRUE;
    MEMSET(destAddr:=ADR(fArrayPhaseErrorFilt[0]),0,SIZEOF(fArrayPhaseErrorFilt));
    fPhaseErrorFiltered:=0;
  END_IF
END_IF

//Ensure that pulses arrive from timing system when velocity is above certain limit
IF ABS(stStatus.fActualVelocity/10) > GVL_Parameters.fCheckTimingPulseMinVel THEN
  timerCheckLatchFreq(IN:=fLatchedPosition = fLatchedPositionOld,PT:=LREAL_TO_TIME(1000/GVL_Parameters.nPulseFreqHz*1.5));
  IF timerCheckLatchFreq.Q THEN
    nMissedTimingPulses:=nMissedTimingPulses+1;
	timerCheckLatchFreq(IN:=FALSE);  //Reset
  END_IF
ELSE
  timerCheckLatchFreq(IN:=FALSE);  //Reset
END_IF
  
IF NOT bPhaseAlgTrigg THEN
  fPhaseError:=nClosestSectorId*10-fLatchedPosition;
END_IF

IF bNewTriggPulse THEN
  nChoosenSector:=nChoosenSector+1;
  IF nChoosenSector > 35 THEN
    nChoosenSector:=0;
  END_IF	
END_IF

// Calculate phase error
IF bPhaseAlgTrigg THEN
  fPhaseError:=nChoosenSector*10-fLatchedPosition;
  IF fPhaseError >=180 THEN
	fPhaseError:=360-fPhaseError;
  ELSIF fPhaseError<-180 THEN
	fPhaseError:=fPhaseError+360;
  END_IF
ELSE
  fPhaseError:=nClosestSectorId*10-fLatchedPosition;
END_IF
fPhaseErrorMM:=fPhaseError*GVL_Parameters.fWheelDiameter*pi/360.0 + fPhaseOffsetMM; 

//Filter phase error
IF bNewTriggPulse THEN
  MEMMOVE(destAddr:=ADR(fArrayPhaseErrorFilt[1]),srcAddr:=ADR(fArrayPhaseErrorFilt[0]),SIZEOF(LREAL)*(GVL_Parameters.nPhaseErrorFilterSize-1));
  fArrayPhaseErrorFilt[0]:=fPhaseErrorMM;
  fPhaseErrorFiltered:=0;
  FOR i := 0 TO (GVL_Parameters.nPhaseErrorFilterSize-1) DO
    fPhaseErrorFiltered:=fPhaseErrorFiltered+fArrayPhaseErrorFilt[i];
  END_FOR
  fPhaseErrorFiltered:=fPhaseErrorFiltered/GVL_Parameters.nPhaseErrorFilterSize;
END_IF

IF NOT fbSuperImpose.bBusy  THEN
  bExecuteSuperImpose:= NOT bExecuteSuperImpose;
END_IF

// Control phase in different ways
// 1: PID
// 2: Superimpose
// 3: Only measure
CASE ePhaseType OF
  E_PHASE_TYPE.PID: 
    // Phasing using PID controller
	//  PID controller with integral anti windup is used to control phase error
	
    IF bNewTriggPulse AND bPhaseAlgTrigg THEN
      nPIDExeSkipCounter:=nPIDExeSkipCounter + 1;
	  
      IF nPIDExeSkipCounter >= GVL_Parameters.nPhasePIDReducedSampleRateFactor THEN
		//Limit output velocity difference from nominal
        IF(fPhaseErrorFiltered > 0) THEN  //Pos error
          IF ABS(fPhaseErrorFiltered)>15 THEN
            fDeltaVelo:= 0.005;
          ELSIF ABS(fPhaseErrorFiltered)>4 THEN
            fDeltaVelo:= 0.003;
          ELSIF ABS(fPhaseErrorFiltered)>1 THEN
            fDeltaVelo:= 0.003;
          ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
            fDeltaVelo:= 0.002;
          ELSE
	        fDeltaVelo:= 0.002;
          END_IF
        ELSE // neg error
          IF ABS(fPhaseErrorFiltered)>15 THEN  
            fDeltaVelo:= 0.005;
          ELSIF ABS(fPhaseErrorFiltered)>4 THEN
            fDeltaVelo:= 0.003;
          ELSIF ABS(fPhaseErrorFiltered)>1 THEN
            fDeltaVelo:= 0.003;
          ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
            fDeltaVelo:= 0.003;
          ELSE
	        fDeltaVelo:= 0.003;
          END_IF	
        END_IF
        nPIDExeSkipCounter:=0;
        fbPhasePID(fSetpointValue:=0,
                   fActualValue := fPhaseErrorFiltered,
                   bReset       := bPhaseControlReset,
		  	       fFF          := 0,
			       fKp          := fPhaseControlKp,
			       fKi          := fPhaseControlKi,
			       fKd          := fPhaseControlKd,
			       fKff         := fPhaseControlKff,
			       fIOutputMin  :=-fDeltaVelo*0.65,
			       fIOutputMax  := fDeltaVelo*0.65,
			       fOutputMin   := -fDeltaVelo,
			       fOutputMax   := fDeltaVelo);
        fPidAdd:=fbPhasePID.fCtrlOutput;
      END_IF
    ELSIF NOT bPhaseAlgTrigg THEN
      fbPhasePID(bReset:=TRUE);  //Reset pid since not used
      fPidAdd:=0;
    END_IF
	fSpeedSetpointLocal:=fNomSpeedSetAdjust+fPidAdd;
	
  E_PHASE_TYPE.SUPERIMPOSE:  
    // Phasing using position superimpose block
	// Positioning is overeloaded over the constant velocity command
	
    //Limit output velocity difference from nominal
    IF(fPhaseErrorFiltered > 0) THEN  //Pos error
      IF ABS(fPhaseErrorFiltered)>15 THEN
        fDeltaVelo:= 0.005;
      ELSIF ABS(fPhaseErrorFiltered)>4 THEN
        fDeltaVelo:= 0.003;
      ELSIF ABS(fPhaseErrorFiltered)>1 THEN
        fDeltaVelo:= 0.002;
      ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
        fDeltaVelo:= 0.002;
      ELSE
        fDeltaVelo:= 0.001;
      END_IF
    ELSE // neg error
      IF ABS(fPhaseErrorFiltered)>15 THEN  
        fDeltaVelo:= 0.005;
      ELSIF ABS(fPhaseErrorFiltered)>4 THEN
        fDeltaVelo:= 0.0035;
      ELSIF ABS(fPhaseErrorFiltered)>1 THEN
        fDeltaVelo:= 0.0035;
      ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
        fDeltaVelo:= 0.0035;
      ELSE
	    fDeltaVelo:= 0.0025;
      END_IF	
    END_IF  
	fbSuperImpose(bExecute:=bExecuteSuperImpose AND bPhaseAlgTrigg,
                  iSampleRateMs:=GVL_Parameters.nTaskSampleTime,
                  fNominalVelocityRpm:=fNomSpeedSetAdjust,
                  fMaxDeltaVelocityRpm:=fDeltaVelo,
                  fPhaseErrorDeg:=fPhaseErrorFiltered/(GVL_Parameters.fWheelDiameter*pi)*360);
 
    fSpeedSetpointLocal:=fbSuperImpose.fVelocitySetpointRpm;
	fbPhasePID(bReset:=TRUE);  //Reset pid since not used
	
  E_PHASE_TYPE.ONLY_MEASURE:  
    // No control, just measure phase error.
	// Usefull for tuning nominal speed.
	// Procedure: 
	// 1: Set to "ONLY_MEASURE" mode
	// 2: ramp up to nominal speed
	// 3: at constant speed adjust GVL_Parameters.fNominalSpeedAdjust so that
	//    phase error is not changing.
	//    -if phase error is increasing then increase velocity
	//    -if phase error is decreasing then decrease velocity 
 
    fSpeedSetpointLocal:=fNomSpeedSetAdjust;
	fbPhasePID(bReset:=TRUE);  //Reset pid since not used
  ELSE
	fSpeedSetpointLocal:=0;
	fbPhasePID(bReset:=TRUE);  //Reset pid since not used
END_CASE;

fbPWM(
       En:=TRUE,
       bEnable:=TRUE,
       iBlockSampleTimeMicroS:=GVL_Parameters.nTaskSampleTime*1000,
       iProcessSampleTimeMicroS:=71000*GVL_Parameters.nPhasePIDReducedSampleRateFactor,
       iDecimalPoint:=3,
       fInput:=fSpeedSetpointLocal,
       bPromoteHigh:=fPhaseErrorFiltered>0,
       ePwmType:=ePwmType);

fSpeedSetpoint:=fbPWM.fOutput;

IF fSpeedSetpoint>GVL_Parameters.fMaximumSPeedRpm THEN
  fSpeedSetpoint:=GVL_Parameters.fMaximumSPeedRpm; 
END_IF

IF NOT bExecute THEN
  fSpeedSetpoint:=0;	
END_IF

dLatchedPositionOld:=dLatchedPosition;
 
//*********Errorhandling
// Latched pulses missing
IF nMissedTimingPulsesOld<>nMissedTimingPulses THEN
  bError:=TRUE;
  nErrorId:=GVL_ErrorCodes.nErrorNoLatchId;
  sErrorStr:=GVL_ErrorCodes.sErrorNoLatchStr;
END_IF

IF bReset THEN
  bError:=FALSE;
  nErrorId:=0;
  //nMissedTimingPulses:=0;
  timerCheckLatchFreq(IN:=FALSE);  //Reset
END_IF

nMissedTimingPulsesOld:=nMissedTimingPulses;]]></ST>
    </Implementation>
    <LineIds Name="FB_ModePhasing">
      <LineId Id="1065" Count="0" />
      <LineId Id="1070" Count="2" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1330" Count="1" />
      <LineId Id="948" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1083" Count="1" />
      <LineId Id="1050" Count="0" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1150" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1838" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="1832" Count="4" />
      <LineId Id="1831" Count="0" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="55" Count="5" />
      <LineId Id="1047" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1116" Count="0" />
      <LineId Id="1090" Count="25" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1124" Count="3" />
      <LineId Id="1129" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="1695" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="1692" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="1701" Count="0" />
      <LineId Id="1693" Count="0" />
      <LineId Id="1697" Count="0" />
      <LineId Id="1700" Count="0" />
      <LineId Id="1699" Count="0" />
      <LineId Id="1694" Count="0" />
      <LineId Id="411" Count="2" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="1133" Count="2" />
      <LineId Id="342" Count="1" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="348" Count="1" />
      <LineId Id="354" Count="1" />
      <LineId Id="350" Count="0" />
      <LineId Id="1141" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="521" Count="1" />
      <LineId Id="942" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1338" Count="0" />
      <LineId Id="1552" Count="2" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1344" Count="0" />
      <LineId Id="1476" Count="2" />
      <LineId Id="1351" Count="0" />
      <LineId Id="1353" Count="0" />
      <LineId Id="1410" Count="0" />
      <LineId Id="1354" Count="0" />
      <LineId Id="1412" Count="24" />
      <LineId Id="1411" Count="0" />
      <LineId Id="1355" Count="12" />
      <LineId Id="1369" Count="1" />
      <LineId Id="1372" Count="2" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1375" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1346" Count="0" />
      <LineId Id="1473" Count="2" />
      <LineId Id="1462" Count="0" />
      <LineId Id="1438" Count="9" />
      <LineId Id="1463" Count="0" />
      <LineId Id="1449" Count="12" />
      <LineId Id="1384" Count="0" />
      <LineId Id="1378" Count="3" />
      <LineId Id="1376" Count="0" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1382" Count="1" />
      <LineId Id="1408" Count="0" />
      <LineId Id="1347" Count="0" />
      <LineId Id="1464" Count="6" />
      <LineId Id="1556" Count="1" />
      <LineId Id="1472" Count="0" />
      <LineId Id="1348" Count="0" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1377" Count="0" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1409" Count="0" />
      <LineId Id="1345" Count="0" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1273" Count="5" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1630" Count="0" />
      <LineId Id="1904" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1392" Count="2" />
      <LineId Id="1402" Count="0" />
      <LineId Id="1395" Count="1" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1398" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="712" Count="1" />
      <LineId Id="700" Count="1" />
      <LineId Id="703" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="1702" Count="0" />
      <LineId Id="1764" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="1766" Count="0" />
      <LineId Id="1555" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>