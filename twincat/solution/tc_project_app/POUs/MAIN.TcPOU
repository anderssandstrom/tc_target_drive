<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="MAIN" Id="{40828a63-f1c1-40a3-a7c5-8a47be350a36}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	stAmsNetId	AT %I*	              : AMSNETID;
	nPort	AT %I*                    : WORD;
	nMasterAxisPosition AT %I*        : DINT;
	nMainDriveMarkPosition AT %I*     : DINT;
	nAdditiveTorqueSetpoint    AT %Q* : INT;   // Unit 0.1%  (10=1%)
	dLatchedPosition AT %I*           : DINT;
    fbTemp                            : EL3214_old;
	inputDigSens1 AT %I*              : BOOL;
	inputDigSens2 AT %I*              : BOOL;
	fbModePhase                       : FB_ModePhasing;	 // Phasing Mode
	fbRampVelo                        : FB_RampVelo;
	fbModeVelo                        : FB_ModeVelo;     // Velocity Mode
	fbModePos                         : FB_ModePos;      // Positioning Mode
	fbModeHome                        : FB_ModeHome;     // Homing Mode
	fbIndraDrive                      : fbIndraDrive;    // Control of drive
	stStatEpics                       : ST_STAT_EPICS;   // Status to EPICS
	stCmdEpics                        : ST_CMD_EPICS;    // Control to EPICS 
	stCommands                        : ST_AXIS_COMMAND; // Control to drive
	stStatus                          : ST_AXIS_STATUS;  // Status from drive
	eTargetStateOld                   : TARGET_STATE_MACHINE;
	addStartupTorqueTrigger           : BOOL:=FALSE;
	iTorqueCommandValue  AT %Q*       : INT := 0;
	bApplyTorqueFF                    : BOOL := FALSE;
	nTest: INT;
	
	//hardware
	fbErrorSystem:FB_ErrorSystem;
	fb_s2_EL1809:EL1809;
	fb_s3_EL1809:EL1809;
	fb_s4_EL2819:EL2819;
	fb_s5_EL2819:EL2819;
	fb_s6_EL9505:EL9505;
	fb_s7_EL1252:EL1252;
	fb_s8_EL9410:EL9410;
	fb_s9_EL1252:EL1252;
	fb_s10_EL7201:EL7201;
	fb_s11_EL7201:EL7201;
	fb_s12_EL7201:EL7201;
	fb_s13_EL3214:EL3214;
	fb_s14_EL5021:EL5021;
	fb_s15_EL6695:EL6695;
	fb_s16_EL9410:EL9410;
	fb_s17_EL2032:EL2032;
	fb_s18_EK1110:EK1110;
	fb_s19_IndraDrive:IndraDrive;
	fb_s20_IPOS8020:iPOS8020;
	fb_s21_IPOS8020:iPOS8020;
	fb_s22_IPOS8020:iPOS8020;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Check hardware status
ACT_1_Hardware();

// Monitor temperature
ACT_2_Temperature();

// Main motor motion
ACT_4_MainDrive();

// Error handling
ACT_5_Error();

// Post exe
eTargetStateOld:=stStatEpics.eTargetState;
]]></ST>
    </Implementation>
    <Action Name="ACT_1_Hardware" Id="{713eae55-748e-42a3-b2f0-81f54e66f4bd}">
      <Implementation>
        <ST><![CDATA[// Check state of hardware

// s2: ch1: emergency stop ok
// s2: ch2: rf01 termal braking filter OK
// s2: ch3: ta01 and ta02 24V power supply ok
// s2: ch4: fc11 24V fuse OK
// s2: ch5: fa01 and fa02 overvoltage protection OK
// s2: ch6: fc01 fuse target wheel motor OK
// s2: ch7: fc06 and fc07 ICS outlets fuse OK
// s2: ch8: fc51, fc52 and fc53 UPS fuses OK (something wrong)
fb_s2_EL1809(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=2);

// s3: ch1: w02.bg01 stepper x limit max
// s3: ch2: w02.bg02 stepper x limit min
// s3: ch3: w02.bg03 stepper x limit max max
// s3: ch4: w02.bg04 stepper x limit min min
// s3: ch5: w02.bg05 stepper y limit max
// s3: ch6: w02.bg06 stepper y limit min
// s3: ch7: w02.bg07 stepper y limit max max
// s3: ch8: w02.bg08 stepper y limit min min
// s3: ch9: w03.bg01 stepper z limit max
// s3: ch10: w03.bg02 stepper z limit min
// s3: ch11: w03.bg03 stepper z limit min service (lowest switch)
// s3: ch12: w03.bg04 stepper z limit max max
// s3: ch13: w03.bg05 stepper z limit min min
// s3: ch14: w03.bg06 stepper z limit min min service (lowest switch)
fb_s3_EL1809(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=3);

// s4: ch1: Feed omron sensor 1
// s4: ch2: Feed omron sensor 2
fb_s4_EL2819(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=4);

// s5: ch1: kf05: w02.bg01 w02.bg02 stepper x limit switch max, limit min
// s5: ch2: kf05: w02.ql1: stepper x brake
// s5: ch3: kf05: w02.bg03 w02.bg04 stepper x limit switch max max, limit min min
// s5: ch5: kf05: w02.bg05 w02.bg06 stepper y limit switch max, limit min
// s5: ch6: kf05: w02.ql2: stepper y brake
// s5: ch7: kf05: w02.bg07 w02.bg08 stepper y limit switch max max, limit min min
// s5: ch9: kf05: w03.bg01 w03.bg02 w03.bg03  stepper z limit switch max, limit min limit min min (service)
// s5: ch10: kf05: w03.bg04 w03.bg05 w03.bg06  stepper z limit switch max max, limit min min
fb_s5_EL2819(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=5);

// s6: 5V power supply
fb_s6_EL9505(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=6);

// s7: time stamped 5V input from timing system (timing reference pulse 14Hz)
// s7: ch1: kf06. Timing system ref pulse (14Hz). Synch pulse ICS.
fb_s7_EL1252(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=7);

// s8: 24V power supply
fb_s8_EL9410(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=8);

// s9: Omron time stamp 24V
// s9: ch1: w01.bg01 fibre sensor input (home or sector?)
// s9: ch2: w01.bg02 fibre sensor input (home or sector?)
fb_s9_EL1252(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=9);

// s10 ch1: kf09 w02.bg21 Resolver X  
fb_s10_EL7201(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=10);

// s11 ch1: kf10 w02.bg22 Resolver Y
fb_s11_EL7201(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=11);

// s11 ch1: kf11 w03.bg21 Resolver Z
fb_s12_EL7201(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=12);

// s13: ch1: kf12 w02.bt01 temperature stepper X PT100
// s13: ch2: kf12 w02.bt02 temperature stepper Y PT100
// s13: ch3: kf12 w03.bt01 temperature stepper Z PT100
// s13: ch4: kf12 Target Main motor Temperature (KTY) (in deg*10)
fb_s13_EL3214(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=13);

// s14: Extra encoder (main rotation)
fb_s14_EL5021(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=14);

// s15: Communication to monitoring system
fb_s15_EL6695(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=15);

// s15: 24V power supply
fb_s16_EL9410(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=16);

// s17: Grease system.. will be moved to ICS s..
fb_s17_EL2032(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=17);

// s1?: Two EL2612 Relay for MPS not in system yet
// s1?: ch1: kf17 Ready for beam
// s1?: ch2: kf17 Beam permit
// s1?: ch3: kf18 Ready for beam
// s1?: ch4: kf18 Beam permit

// s18: extension to drives
fb_s18_EK1110(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=18);

// s19: Main target drive
fb_s19_IndraDrive(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=19);

// s20: Stepper 1
fb_s20_IPOS8020(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=20);

// s21: Stepper 2
fb_s21_IPOS8020(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=21);

// s22: Stepper 3
fb_s22_IPOS8020(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=22);
	
// Below part will be broken out to separate PLC plus some rebuilds to the 
// above (grease, monitoring, statemachine..)
//fb_s22_EK1100(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=22);
//fb_s23_EL1252(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=23);
//fb_s24_EL3742(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=24);
//fb_s25_EL3214(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=25);
//fb_s26_EL3214(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=26);
//fb_s27_EL3214(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=27);
//fb_s28_EL2819(ErrorSystem:=fbErrorSystem.pErrorSystem,En:=TRUE,iTerminal_ID:=28);
//Execute error system (not sure if should be used)
fbErrorSystem(En:=TRUE);
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_2_Temperature" Id="{ec2bd795-c2d7-49be-acd7-2671eaea481b}">
      <Implementation>
        <ST><![CDATA[// Function: Monitor tempertures
// Interlock motion on temperatures
// Author: Anders Sandström 2019

stStatEpics.fActTemp:=fb_s13_EL3214.iAI_4/10.0;

// Motor Temperature Monitoring Interlock
IF (stStatEpics.fActTemp >= GVL_Parameters.nMaxMotorTemperature)  OR fbTemp.iAi_Ch1_Stat > 0 THEN
	stCmdEpics.bEnable:= FALSE;
	stCmdEpics.bExecute:= FALSE;
	stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorIndraTempToHigh;
	stStatEpics.sErrorStr:=GVL_ErrorCodes.sErrorIndraTempToHigh;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_4_MainDrive" Id="{0608089f-ed53-4fbf-a585-99ff0324bc84}">
      <Implementation>
        <ST><![CDATA[
// Enable Axis independent of state (Ensure that drive is ready to enable)
IF stCmdEpics.bEnable THEN
   IF stStatus.bDCBusPresent AND NOT stStatus.bSTOActiveCh1 AND NOT stStatus.bSTOActiveCh2 AND NOT stStatus.bError THEN 
	   stCommands.bEnableAxis :=stCmdEpics.bEnable;
   ELSE
	   stCommands.bEnableAxis := FALSE;
	   stCmdEpics.bExecute := FALSE;
	   stStatEpics.bError:=TRUE;
	   stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorIndraNotReady;
	   stStatEpics.sErrorStr:=GVL_ErrorCodes.sErrorIndraNotReady; 
   END_IF
ELSE
	//Reset enable
    stCommands.bEnableAxis:=stCmdEpics.bEnable;
END_IF

IF stCmdEpics.bExecute THEN
  IF stStatus.bAxisEnabled THEN
    stCommands.bHaltAxis:=stCmdEpics.bExecute;
  ELSE
	stCmdEpics.bExecute:=FALSE;
	stCommands.bHaltAxis:=FALSE;
	stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorNotEnabled;
	stStatEpics.sErrorStr:=GVL_ErrorCodes.sErrorNotEnabled; 
  END_IF
ELSE
  stCommands.bHaltAxis:=stCmdEpics.bExecute;
END_IF

IF NOT stCommands.bEnableAxis THEN
  stCmdEpics.bExecute:=FALSE;
END_IF

stStatEpics.bEnabled:=stStatus.bAxisEnabled;
stCommands.bCmd_ErrorReset:=stCmdEpics.bReset;


stCommands.bCmd_DriveControlledHoming:=FALSE;

// Only allow state change if execute is low
IF stCmdEpics.eTargetStateCmd <> stStatEpics.eTargetState AND NOT stCmdEpics.bexecute THEN
	stStatEpics.eTargetState:=stCmdEpics.eTargetStateCmd;
END_IF

//nAdditiveTorqueSetpoint:=0;
//IF NOT  stCmdEpics.bExecute THEN
//	addStartupTorqueTrigger:=TRUE;
//END_IF

CASE stStatEpics.eTargetState OF 
	TARGET_STATE_MACHINE.CONSTANT_VELOCITY:
        stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefaultVel;
        stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultVel;
		fbModeVelo(
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          stCmdEpics.fVelSet,
			stStatus:=	       stStatus,	
			stCommands:=       stCommands);
			
			//ramp velocity with selected acceleration
			fbRampVelo(bExecute:=stCmdEpics.bExecute,
              fVelSetIn:=fbModeVelo.fSpeedSetpoint,
              iBlockSampleTimeMicroS:=GVL_Parameters.nTaskSampleTime*1000,
              fVelSetOut:=stCommands.fVelocityCommandValue,
              fVelActIn:=stStatus.fActualVelocity/10);
			  
// add extra torque att startup TEST
		//	IF stStatus.bAxisEnabled AND stCmdEpics.bExecute AND stCmdEpics.fVelSet > 0 THEN
		//		IF stStatus.fActualVelocity/10< stCmdEpics.fVelSet/2 THEN
		//	        nAdditiveTorqueSetpoint:=100;  //Add 10% when under x rpm
		//		ELSIF stStatus.fActualVelocity/10 > stCmdEpics.fVelSet/2 THEN
		//			nAdditiveTorqueSetpoint:=40;
		//		END_IF
		//	END_IF

			
	TARGET_STATE_MACHINE.POSITIONING:
	    stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefaultPos;
        stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultPos;

		fbModePos(
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          stCmdEpics.fVelSet,
			fPosSet:=          stCmdEpics.fPosSet,
			stStatus:=         stStatus,	
			stCommands:=       stCommands);
		
	TARGET_STATE_MACHINE.PHASING:
	    stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefaultVel;
        stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultVel;
   		fbModePhase(
			bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			stStatus:=	       stStatus,
			dLatchedPosition:= dLatchedPosition,
			ePhaseType:=       stCmdEpics.ePhaseCntrlAlg,
			ePwmType:=         stCmdEpics.ePhasePwmType,
			stCommands:=       stCommands);
			
			//ramp velocity with selected acceleration (as long as not phasing)
			IF NOT fbModePhase.bPhasing THEN
              fbRampVelo(bExecute:=stCmdEpics.bExecute,
                fVelSetIn:=fbModePhase.fSpeedSetpoint,
                iBlockSampleTimeMicroS:=GVL_Parameters.nTaskSampleTime*1000,
                fVelSetOut:=stCommands.fVelocityCommandValue,
                fVelActIn:=fbModePhase.fLastSectorVelocity);
			ELSE // if phasing then take setpoint direct from fbModePhase
			  stCommands.fVelocityCommandValue:=fbModePhase.fSpeedSetpoint;
            END_IF
						
	TARGET_STATE_MACHINE.HOMING:
        stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefaultVel;
        stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultVel;
        fbModeHome( 
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          GVL_Parameters.fHomeSpeedRpm,
			fPosSet:=          stCmdEpics.fPosSet,
			stStatus:=	       stStatus,	
			stCommands:=       stCommands);
		//stCommands.fFeedrateOverride:=1.0;
		//ramp velocity with selected acceleration
		fbRampVelo(bExecute:=stCmdEpics.bExecute,
              fVelSetIn:=fbModeHome.fSpeedSetpoint,
              iBlockSampleTimeMicroS:=GVL_Parameters.nTaskSampleTime*1000,
              fVelSetOut:=stCommands.fVelocityCommandValue,
              fVelActIn:=stStatus.fActualVelocity/10);
 
	TARGET_STATE_MACHINE.TORQUE:
	    stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefaultVel;
        stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefaultVel;
		stCommands.eOperationMode:=E_OPERATION_MODE_NO.eSecondaryOpMode7;
	    stCommands.eMotionMode :=e_Motion_mode.eJogPositive;
	
	  ELSE  // No valid state
		  
		bApplyTorqueFF:=FALSE;
		stCmdEpics.bExecute:=FALSE;
        stCmdEpics.bEnable:=FALSE;
		stCommands.fVelocityCommandValue:=0;
		stCommands.fCommandVelocity:=0;
		stCommands.fCommandAcceleration:=0;
        stCommands.fCommandDeceleration:=0;
		stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorInvalidState;
	    stStatEpics.sErrorStr:=GVL_ErrorCodes.sErrorInvalidState;
END_CASE

IF bApplyTorqueFF THEN
  // add extra torque att startup TEST
  IF stStatus.bAxisEnabled (*AND stCmdEpics.bExecute*) THEN
	 nAdditiveTorqueSetpoint:=nTest;  //Add 10% when under x rpm
  END_IF
END_IF

IF NOT stCmdEpics.bExecute THEN
	stCommands.fVelocityCommandValue:=0;
END_IF

// TODO: Why I put this here?
//stCommands.eMotionMode:=E_MOTION_MODE.eStop;

// Check maximum velocity
IF stCommands.fCommandVelocity > GVL_Parameters.fMaximumSPeedRpm THEN
  stCommands.fCommandVelocity := GVL_Parameters.fMaximumSPeedRpm;
END_IF
IF stCommands.fVelocityCommandValue > GVL_Parameters.fMaximumSPeedRpm THEN
  stCommands.fVelocityCommandValue := GVL_Parameters.fMaximumSPeedRpm;
END_IF

// Rexroth FB
fbIndraDrive(
	AmsNetId:= stAmsNetId, 
	AdsAddr_Port:= nPort, 
	stAxisCommands:= stCommands, 
	stDriveStatus:= , 
	stAxisStatus=> stStatus, 
	stDriveCommands=> );

// Calculate values for status in EPICS
stStatEpics.fSetVelRaw:= DINT_TO_LREAL(MAIN.fbIndraDrive.stDriveCommands.nS40_VelocityCommandValue)/10000;	
stStatEpics.fActPos:=stStatus.fActualPosition;
stStatEpics.fActTorque:=stStatus.fActualTorque;
stStatEpics.fActVel:=stStatus.fActualVelocity/10;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_5_Error" Id="{6316e704-a716-4c28-824a-a22fe5448145}">
      <Implementation>
        <ST><![CDATA[// Function: Error handling
// Author: Anders Sandström 2019

IF stStatEpics.eTargetState = TARGET_STATE_MACHINE.PHASING THEN
  IF fbModePhase.bError AND NOT stStatEpics.bError THEN
	stStatEpics.bError:=fbModePhase.bError;
	stStatEpics.nErrorId:=fbModePhase.nErrorId;
	stStatEpics.sErrorStr:=fbModePhase.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.CONSTANT_VELOCITY THEN
  IF fbModeVelo.bError AND NOT stStatEpics.bError THEN
	stStatEpics.bError:=fbModeVelo.bError;
	stStatEpics.nErrorId:=fbModeVelo.nErrorId;
	stStatEpics.sErrorStr:=fbModeVelo.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.POSITIONING THEN
  IF fbModePos.bError AND NOT stStatEpics.bError THEN
	stStatEpics.bError:=fbModePos.bError;
	stStatEpics.nErrorId:=fbModePos.nErrorId;
	stStatEpics.sErrorStr:=fbModePos.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.HOMING THEN
  IF fbModeHome.bError AND NOT stStatEpics.bError THEN
    stStatEpics.bError:=fbModeHome.bError;
	stStatEpics.nErrorId:=fbModeHome.nErrorId;
	stStatEpics.sErrorStr:=fbModeHome.sErrorStr;
  END_IF
END_IF

// To high velocity detected. Shutdown..
IF ABS(stStatus.fActualVelocity)/10 > GVL_Parameters.fMaximumSPeedRpm THEN 
  stCommands.bEnableAxis:= FALSE;
  stCmdEpics.bEnable:=FALSE;
  stCmdEpics.bExecute:=FALSE;
  stStatEpics.bError:=TRUE;
  stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorVelToHigh;
  stStatEpics.sErrorStr:=GVL_ErrorCodes.sErrorVelToHigh;
END_IF

IF stcmdEpics.bReset THEN
  stStatEpics.bError:=FALSE;
  stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorCodeOKId;
  stStatEpics.sErrorStr:=GVL_ErrorCodes.nErrorCodeOKStr;
  stStatEpics.bBrake1TempAlarm:=FALSE;
  stStatEpics.bBrake2TempAlarm:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_X_Diag" Id="{2a0ea7d8-8ff8-4796-ae8a-6c3ebb6f7955}">
      <Implementation>
        <ST><![CDATA[// Function: Some parameters just for debugging
// Note: Do not need to be executed, can be watched online anyway..
// Author: Anders Sandström 2019

	stCommands.bCmd_ActivateParameterMode;//True puts the drive in parameter mode
	stCommands.bCmd_DisableLimits;// True disables monitoring of errors
	stCommands.bCmd_DriveControlledHoming;// True starts homing procedure defined in the drive
	stCommands.bCmd_ErrorReset;
	stCommands.bCmd_ExitParameterMode;
	stCommands.bCmd_RunVirtualMater;// Jog command to the virtual master
	stCommands.bCmd_SetAbsolutePosition;
	stCommands.bCommandPositionChange;// Drive moves to the current target position, when bCommandVAlueAccept toggled, drive moves to the new target position
	stCommands.bCommandValueAccept;// Used in "Drive positioning Mode" to update the target position when toggled
	stCommands.bEnableAxis;
	stCommands.bHaltAxis;// Performs halt on the drive, bEnableaxis has to be TRUE
	stCommands.bPositionCommandValue;//0=Absolute;1=Relative
	stCommands.eMotionMode;
	stCommands.eOperationMode;
	stCommands.fCommandAcceleration;// Acceleration used for positioning and jogging
	stCommands.fCommandDeceleration;// Deceleration used for positioning and jogging
	stCommands.fCommandPosition;
	stCommands.fCommandVelocity;// Velocity used for positioning and jogging
	stCommands.fFeedrateOverride;// Parameter used for adjustment of the velocity (0,100)%
	stCommands.fTorqueLimit;
	stCommands.fVelocityCommandValue;// S40, velocity used for positining and jogging (in velocity mode)
	stStatus.bAxisEnabled;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="1534" Count="0" />
      <LineId Id="1532" Count="1" />
      <LineId Id="1383" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1529" Count="0" />
      <LineId Id="1439" Count="0" />
      <LineId Id="1244" Count="0" />
      <LineId Id="1388" Count="0" />
      <LineId Id="1386" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1536" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="1389" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_1_Hardware">
      <LineId Id="1" Count="0" />
      <LineId Id="58" Count="7" />
      <LineId Id="57" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="126" Count="2" />
      <LineId Id="134" Count="3" />
      <LineId Id="139" Count="3" />
      <LineId Id="145" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="3" />
      <LineId Id="123" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="167" Count="2" />
      <LineId Id="162" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_2_Temperature">
      <LineId Id="31" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="12" Count="4" />
      <LineId Id="35" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_4_MainDrive">
      <LineId Id="115" Count="1" />
      <LineId Id="175" Count="2" />
      <LineId Id="180" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="218" Count="2" />
      <LineId Id="217" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="212" Count="2" />
      <LineId Id="209" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="127" Count="5" />
      <LineId Id="113" Count="1" />
      <LineId Id="2" Count="6" />
      <LineId Id="152" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="9" Count="24" />
      <LineId Id="154" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="34" Count="8" />
      <LineId Id="157" Count="1" />
      <LineId Id="43" Count="20" />
      <LineId Id="160" Count="1" />
      <LineId Id="64" Count="7" />
      <LineId Id="134" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="163" Count="1" />
      <LineId Id="74" Count="3" />
      <LineId Id="193" Count="0" />
      <LineId Id="78" Count="4" />
      <LineId Id="166" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="85" Count="12" />
      <LineId Id="144" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="147" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="99" Count="12" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_5_Error">
      <LineId Id="41" Count="0" />
      <LineId Id="2" Count="28" />
      <LineId Id="32" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="54" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="33" Count="7" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_X_Diag">
      <LineId Id="2" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="3" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>