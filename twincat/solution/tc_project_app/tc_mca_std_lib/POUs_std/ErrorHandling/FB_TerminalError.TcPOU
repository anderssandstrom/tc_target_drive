<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_TerminalError" Id="{d77c0e9f-60d8-42e2-aa7d-91cf61b54d46}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TerminalError

VAR_INPUT
    En                  : BOOL;
    iTerminal_ID        : INT;
    bWcState            : BOOL;
    uiInfoData_State    : UINT;
    pErrorSystem        : POINTER TO ST_ErrorSystem;                    //Pointer to the error system
END_VAR

VAR_OUTPUT
    EnO : BOOL;
    bError : BOOL := FALSE;
END_VAR

VAR
    iStateError : UINT;
    iOtherError : UINT;
    ErrorData   : ST_ErrorEntry;
    nErrSysCNT  : UINT;

    bStateChanged           : BOOL;             //Indicate if state change happened
    uiInfoData_State_Prev   : UINT := 16#8;     //Previous value of Infodata.State
    bWcState_Prev           : BOOL := FALSE;    //Previous state of WcState

    //FB-s

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
* ================================================================================
*                                   DESCRIPTION
* ================================================================================
* This Function Block provides connection to the Error System specifically
* for monitoring an EtherCat terminal's state of operation. The function block
* checks the content of the linked variables, that encodes the terminal's state.
* If any deviation from the nominal state is experienced an entry is created with
* all the necessary information. If the terminal goes through a series of
* different error states each state transition is tracked in a new entry.
* ================================================================================
*)

//Connect EN to EnO
EnO:=En;

IF En THEN
    //Check if pointer is OK
    IF pErrorSystem=0 THEN RETURN; END_IF

    //Any difference from normal state creates an error
    IF En AND (bWcState OR uiInfoData_State<>16#8) THEN
        bError:=TRUE;
    ELSE
        bError:=FALSE;
    END_IF

    //Change detection
    IF uiInfoData_State <> uiInfoData_State_Prev OR bWcState <> bWcState_Prev THEN
        bStateChanged := TRUE;
    ELSE
        bStateChanged := FALSE;
    END_IF

    //Update previous values
    uiInfoData_State_Prev   := uiInfoData_State;
    bWcState_Prev           := bWcState;

    //Decision tree
    IF bStateChanged THEN
        IF bError THEN
            IF ErrorData.ErrorState = DUT_ErrorState.Active THEN
                //Close active error
                //Read system time
                ErrorData.sDateTimeOff  := Tc2_EtherCat.DCTIME64_TO_STRING(Tc2_EtherCAT.F_GetActualDcTime64());
                ErrorData.ErrorState    := DUT_ErrorState.Inactive;
                //Write Off-time to Error System
                FOR nErrSysCNT := 0 TO cSizeOfErrorData - 1 DO
                    IF pErrorSystem^.aErrorData[nErrSysCNT].ErrorNum = ErrorData.ErrorNum THEN
                        pErrorSystem^.aErrorData[nErrSysCNT].sDateTimeOff   := ErrorData.sDateTimeOff;
                        pErrorSystem^.aErrorData[nErrSysCNT].ErrorState     := DUT_ErrorState.Inactive;
                        EXIT;
                    END_IF
                END_FOR

                //Clear ErrorData
                MEMSET(ADR(ErrorData), 0, SIZEOF(ErrorData));
            END_IF

            //Open a new error
            ErrorData.ErrorState    := DUT_ErrorState.Active;                                                   //Set Error State
            ErrorData.sDateTimeOn   := Tc2_EtherCat.DCTIME64_TO_STRING(Tc2_EtherCAT.F_GetActualDcTime64());     //Convert to string
            ErrorData.iTerminalID   := iTerminal_ID;                                                            //Terminal_ID

            //Error message according to uiInfoData_State and WcState
            iStateError := (uiInfoData_State AND 16#000F);                                              //Mask for operation state
            iOtherError := (uiInfoData_State AND 16#00F0);                                              //Mask for the other 3 kind of errors
            //Error messages according to the least significant digit
            CASE iStateError OF
                16#0001 :
                            ErrorData.sErrorMessage := 'Slave in INIT state;   ';
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0002 :
                            ErrorData.sErrorMessage := 'Slave in PREOP state;   ';
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0003 :
                            ErrorData.sErrorMessage := 'Slave in BOOT state;   ';
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0004 :
                            ErrorData.sErrorMessage := 'Slave in SAFEOP state;   ';
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0008 : ;                                                                             //Normal operation state
            ELSE
                ErrorData.sErrorMessage := 'Undefined State of operation;   ';
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, UINT_TO_STRING(iStateError));
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, '   ');
                ErrorData.ErrorPriority := 1;
            END_CASE

            //Error messages according to the second least significant digit
            CASE iOtherError OF
                16#0000 : ;                                                                         //No error case
                16#0010 :
                            ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, 'Slave signals error;   ');
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0020 :
                            ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, 'Invalid vendorID/productCode read;   ');
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
                16#0040 :
                            ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, 'Initialisation error occured;   ');
                            IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
            ELSE
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, 'Undefined Error ID: ');
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, UINT_TO_STRING(iOtherError));
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, '   ');
                ErrorData.ErrorPriority := 1;
            END_CASE

            //Errormessage according to WcState bit
            IF bWcState THEN
                ErrorData.sErrorMessage := CONCAT (ErrorData.sErrorMessage, 'Invalid Data;');
                IF ErrorData.ErrorPriority >= 5 OR ErrorData.ErrorPriority = 0 THEN ErrorData.ErrorPriority := 5; END_IF
            END_IF

            //Check for overflow
            IF pErrorSystem^.nNoError >= cSizeOfErrorData THEN
                pErrorSystem^.nNoOverflow := pErrorSystem^.nNoOverflow+1;
            END_IF

            //Write Error Data into Error System
            ErrorData.ErrorNum  := pErrorSystem^.nNExtErrorNum ;
            MEMMOVE( ADR(pErrorSystem^.aErrorData[1]), ADR(pErrorSystem^.aErrorData[0]), (cSizeOfErrorData-1) * SIZEOF(ST_ErrorEntry));
            pErrorSystem^.aErrorData[0] := ErrorData;
            pErrorSystem^.nNExtErrorNum := pErrorSystem^.nNExtErrorNum+1;

        ELSE
            //Close Active Error
            //Read system time
            ErrorData.sDateTimeOff  := Tc2_EtherCat.DCTIME64_TO_STRING(Tc2_EtherCAT.F_GetActualDcTime64());
            ErrorData.ErrorState    := DUT_ErrorState.Inactive;
            //Write Off time to Error System
            FOR nErrSysCNT := 0 TO cSizeOfErrorData - 1 DO
                IF pErrorSystem^.aErrorData[nErrSysCNT].ErrorNum = ErrorData.ErrorNum THEN
                    pErrorSystem^.aErrorData[nErrSysCNT].sDateTimeOff   := ErrorData.sDateTimeOff;
                    pErrorSystem^.aErrorData[nErrSysCNT].ErrorState     := ErrorData.ErrorState;
                    EXIT;
                END_IF
            END_FOR

            //Clear ErrorData
            MEMSET(ADR(ErrorData), 0, SIZEOF(ErrorData));
        END_IF
    END_IF

END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_TerminalError">
      <LineId Id="483" Count="3" />
      <LineId Id="492" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="503" Count="3" />
      <LineId Id="493" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="453" Count="0" />
      <LineId Id="64" Count="9" />
      <LineId Id="221" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="312" Count="1" />
      <LineId Id="315" Count="2" />
      <LineId Id="319" Count="6" />
      <LineId Id="239" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="258" Count="1" />
      <LineId Id="262" Count="6" />
      <LineId Id="584" Count="1" />
      <LineId Id="269" Count="0" />
      <LineId Id="582" Count="1" />
      <LineId Id="270" Count="0" />
      <LineId Id="580" Count="1" />
      <LineId Id="271" Count="0" />
      <LineId Id="578" Count="1" />
      <LineId Id="272" Count="4" />
      <LineId Id="537" Count="0" />
      <LineId Id="277" Count="5" />
      <LineId Id="576" Count="1" />
      <LineId Id="283" Count="0" />
      <LineId Id="574" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="285" Count="3" />
      <LineId Id="539" Count="0" />
      <LineId Id="289" Count="4" />
      <LineId Id="540" Count="0" />
      <LineId Id="294" Count="10" />
      <LineId Id="245" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="421" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="331" Count="2" />
      <LineId Id="335" Count="6" />
      <LineId Id="251" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>