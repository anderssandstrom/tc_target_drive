<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="MAIN" Id="{40828a63-f1c1-40a3-a7c5-8a47be350a36}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	stAmsNetId	AT %I*	              : AMSNETID;
	nPort	AT %I*                    : WORD;
	nMasterAxisPosition AT %I*        : DINT;
	nAdditivePositionSetpoiunt AT %Q* : DINT;
	dLatchedPosition AT %I*           : DINT;
	iBrakeSpRaw AT %Q*                : INT := 0;
	//iRotMotorTempRaw AT %I*           : INT := 0;
    fbTemp                            : EL3214;
	bBrakeFreewheelOn AT %Q*          : BOOL;
	bBrakeLockedOn AT %Q*             : BOOL;
    inputDummy AT %I*                 : BOOL;
	inputDigSens1 AT %I*              : BOOL;
	inputDigSens2 AT %I*              : BOOL;
	fbBrakeTorque                     : FB_BrakeTorque;  // Control brake
	fbModePhase                       : FB_ModePhasing;	 // Phasing Mode
	fbModeVelo                        : FB_ModeVelo;     // Velocity Mode
	fbModePos                         : FB_ModePos;      // Positioning Mode
	fbModeHome                        : FB_ModeHome;     // Homing Mode
	fbIndraDrive                      : fbIndraDrive;    // Control of drive
	stStatEpics                       : ST_STAT_EPICS;   // Status to EPICS
	stCmdEpics                        : ST_CMD_EPICS;    // Control to EPICS 
	stCommands                        : ST_AXIS_COMMAND; // Control to drive
	stStatus                          : ST_AXIS_STATUS;  // Status from drive
	eTargetStateOld                   : TARGET_STATE_MACHINE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTemp(En:=TRUE);

IF fbTemp.bError THEN
	stCmdEpics.bExecute:=0;
	stCmdEpics.bEnable:=0;
END_IF

stStatEpics.fActTemp:=fbTemp.iAi_Ch1_Value/10.0;
stStatEpics.fBrakeActTemp1:=fbTemp.iAi_Ch2_Value/10.0;
stStatEpics.fBrakeActTemp2:=fbTemp.iAi_Ch3_Value/10.0;

// Motor Temperature Monitoring Interlock
IF (stStatEpics.fActTemp >= GVL_Parameters.nMaxMotorTemperature)  OR fbTemp.iAi_Ch1_Stat >0 THEN
	stCmdEpics.bEnable:= FALSE;
	stCmdEpics.bExecute:= FALSE;	
END_IF

//Brake temperature monitoring Interlock 1
IF (stStatEpics.fBrakeActTemp1 >= GVL_Parameters.nMaxBrakeTemperature) OR fbTemp.iAi_Ch2_Stat >0 OR stStatEpics.bBrake1TempAlarm THEN
	stCmdEpics.bEnable:= FALSE;
	stCmdEpics.bExecute:= FALSE;		
    stStatEpics.bBrake1TempAlarm:=TRUE; 
END_IF
//Brake temperature monitoring Interlock 2
IF (stStatEpics.fBrakeActTemp2 >= GVL_Parameters.nMaxBrakeTemperature) OR fbTemp.iAi_Ch3_Stat >0 OR stStatEpics.bBrake2TempAlarm THEN
	stCmdEpics.bEnable:= FALSE;
	stCmdEpics.bExecute:= FALSE;		
    stStatEpics.bBrake2TempAlarm:=TRUE; 
END_IF

// Enable Axis independent of state
stCommands.bEnableAxis :=stCmdEpics.bEnable;
stCommands.bHaltAxis :=stCmdEpics.bEnable;
stStatEpics.bEnabled:=stStatus.bAxisEnabled;
stCommands.bCmd_ErrorReset:=stCmdEpics.bReset;

IF NOT stCmdEpics.bEnable THEN
  stCmdEpics.bExecute:=FALSE;
END_IF

stCommands.fCommandAcceleration:=GVL_Parameters.fAccDefault;
stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefault;
stCommands.bCmd_DriveControlledHoming:=FALSE;

// Only allow state change if execute is low
IF stCmdEpics.eTargetStateCmd <> stStatEpics.eTargetState AND NOT stCmdEpics.bexecute THEN
	stStatEpics.eTargetState:=stCmdEpics.eTargetStateCmd;
END_IF

CASE stStatEpics.eTargetState OF 
	TARGET_STATE_MACHINE.CONSTANT_VELOCITY:
		fbModeVelo(
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          stCmdEpics.fVelSet,
			stStatus:=	       stStatus,	
			stCommands:=       stCommands);
			
	TARGET_STATE_MACHINE.POSITIONING:
		fbModePos(
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          stCmdEpics.fVelSet,
			fPosSet:=          stCmdEpics.fPosSet,
			stStatus:=         stStatus,	
			stCommands:=       stCommands);
		
	TARGET_STATE_MACHINE.PHASING:
   		fbModePhase(
			bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			stStatus:=	       stStatus,
			dLatchedPosition:= dLatchedPosition,	
			stCommands:=       stCommands);
			
	TARGET_STATE_MACHINE.HOMING:
        fbModeHome( 
            bExecute:=         stCmdEpics.bExecute,
            bReset:=           stCmdEpics.bReset,
			fVelSet:=          stCmdEpics.fVelSet,
			fPosSet:=          stCmdEpics.fPosSet,
			stStatus:=	       stStatus,	
			stCommands:=       stCommands);
		
	  ELSE  // No valid state
		  
		stCmdEpics.bExecute:=FALSE;
        stCmdEpics.bEnable:=FALSE;
		stCommands.fVelocityCommandValue:=0;
		stCommands.fCommandVelocity:=0;
		
END_CASE

IF NOT stCmdEpics.bExecute THEN
	stCommands.fVelocityCommandValue:=0;
END_IF

// Rexroth FB
fbIndraDrive(
	AmsNetId:= stAmsNetId, 
	AdsAddr_Port:= nPort, 
	stAxisCommands:= stCommands, 
	stDriveStatus:= , 
	stAxisStatus=> stStatus, 
	stDriveCommands=> );
	
// Calculate values for status in EPICS
stStatEpics.fSetVelRaw:= DINT_TO_LREAL(MAIN.fbIndraDrive.stDriveCommands.nS40_VelocityCommandValue)/10000;	
stStatEpics.fActPos:=stStatus.fActualPosition;
stStatEpics.fActTorque:=stStatus.fActualTorque;
stStatEpics.fActVel:=stStatus.fActualVelocity/10;
	
// Control brake
ACT_Brake();

// Error Handling
IF stStatEpics.eTargetState = TARGET_STATE_MACHINE.PHASING THEN
  IF fbModePhase.bError AND NOT stStatEpics.bError THEN
	  stStatEpics.bError:=fbModePhase.bError;
	  stStatEpics.nErrorId:=fbModePhase.nErrorId;
	  stStatEpics.sErrorStr:=fbModePhase.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.CONSTANT_VELOCITY THEN
   IF fbModeVelo.bError AND NOT stStatEpics.bError THEN
	  stStatEpics.bError:=fbModeVelo.bError;
	  stStatEpics.nErrorId:=fbModeVelo.nErrorId;
	  stStatEpics.sErrorStr:=fbModeVelo.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.POSITIONING THEN
  IF fbModePos.bError AND NOT stStatEpics.bError THEN
	  stStatEpics.bError:=fbModePos.bError;
	  stStatEpics.nErrorId:=fbModePos.nErrorId;
	  stStatEpics.sErrorStr:=fbModePos.sErrorStr;
  END_IF
  
ELSIF stStatEpics.eTargetState = TARGET_STATE_MACHINE.HOMING THEN
  IF fbModeHome.bError AND NOT stStatEpics.bError THEN
	  stStatEpics.bError:=fbModeHome.bError;
	  stStatEpics.nErrorId:=fbModeHome.nErrorId;
	  stStatEpics.sErrorStr:=fbModeHome.sErrorStr;
  END_IF
  
END_IF


IF stcmdEpics.bReset THEN
	stStatEpics.bError:=FALSE;
	stStatEpics.nErrorId:=GVL_ErrorCodes.nErrorCodeOKId;
	stStatEpics.sErrorStr:=GVL_ErrorCodes.nErrorCodeOKStr;
	stStatEpics.bBrake1TempAlarm:=FALSE;
	stStatEpics.bBrake2TempAlarm:=FALSE;
END_IF

eTargetStateOld:=stStatEpics.eTargetState;

// Some parameters just for debugging	
	stCommands.bCmd_ActivateParameterMode;//True puts the drive in parameter mode
	stCommands.bCmd_DisableLimits;// True disables monitoring of errors
	stCommands.bCmd_DriveControlledHoming;// True starts homing procedure defined in the drive
	stCommands.bCmd_ErrorReset;
	stCommands.bCmd_ExitParameterMode;
	stCommands.bCmd_RunVirtualMater;// Jog command to the virtual master
	stCommands.bCmd_SetAbsolutePosition;
	stCommands.bCommandPositionChange;// Drive moves to the current target position, when bCommandVAlueAccept toggled, drive moves to the new target position
	stCommands.bCommandValueAccept;// Used in "Drive positioning Mode" to update the target position when toggled
	stCommands.bEnableAxis;
	stCommands.bHaltAxis;// Performs halt on the drive, bEnableaxis has to be TRUE
	stCommands.bPositionCommandValue;//0=Absolute;1=Relative
	stCommands.eMotionMode;
	stCommands.eOperationMode;
	stCommands.fCommandAcceleration;// Acceleration used for positioning and jogging
	stCommands.fCommandDeceleration;// Deceleration used for positioning and jogging
	stCommands.fCommandPosition;
	stCommands.fCommandVelocity;// Velocity used for positioning and jogging
	stCommands.fFeedrateOverride;// Parameter used for adjustment of the velocity (0,100)%
	stCommands.fTorqueLimit;
	stCommands.fVelocityCommandValue;// S40, velocity used for positining and jogging (in velocity mode)
	stStatus.bAxisEnabled;
	]]></ST>
    </Implementation>
    <Action Name="ACT_Brake" Id="{a8ef5cdf-33a2-41f9-b34e-1a95819e04c4}">
      <Implementation>
        <ST><![CDATA[//bBrakeFreewheelOn:=fBrakeSpNm=0;
bBrakeFreewheelOn:=stCmdEpics.bFreeWheelOnOnCmd;
bBrakeLockedOn:=stCmdEpics.bBrakeLockOnCmd;

fbBrakeTorque(iTorqueValueinNm:=stCmdEpics.fBrakeSpNm);
iBrakeSpRaw:=fbBrakeTorque.iTorqueScaled;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="856" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1168" Count="0" />
      <LineId Id="1158" Count="2" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1163" Count="4" />
      <LineId Id="1189" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1175" Count="1" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1183" Count="5" />
      <LineId Id="1156" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="724" Count="1" />
      <LineId Id="835" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="996" Count="0" />
      <LineId Id="1002" Count="1" />
      <LineId Id="836" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="1040" Count="0" />
      <LineId Id="1044" Count="0" />
      <LineId Id="1041" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="1042" Count="0" />
      <LineId Id="1021" Count="0" />
      <LineId Id="1045" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="1064" Count="3" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1068" Count="1" />
      <LineId Id="1047" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="1048" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="1098" Count="0" />
      <LineId Id="1102" Count="0" />
      <LineId Id="1099" Count="1" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1101" Count="0" />
      <LineId Id="1009" Count="0" />
      <LineId Id="1049" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="1030" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="1032" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="8" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="860" Count="1" />
      <LineId Id="277" Count="0" />
      <LineId Id="666" Count="3" />
      <LineId Id="768" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="845" Count="1" />
      <LineId Id="848" Count="0" />
      <LineId Id="917" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1079" Count="4" />
      <LineId Id="1090" Count="0" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1084" Count="3" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1105" Count="5" />
      <LineId Id="1104" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="854" Count="1" />
      <LineId Id="916" Count="0" />
      <LineId Id="1190" Count="1" />
      <LineId Id="853" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="918" Count="22" />
      <LineId Id="275" Count="0" />
      <LineId Id="999" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_Brake">
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>