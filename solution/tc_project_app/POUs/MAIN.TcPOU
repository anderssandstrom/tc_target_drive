<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="MAIN" Id="{40828a63-f1c1-40a3-a7c5-8a47be350a36}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	fbIndraDrive	: fbIndraDrive;
	stAmsNetId	AT %I*	: AMSNETID;
	nPort	AT %I* : WORD;
	stCommands: ST_AXIS_COMMAND;
	stStatus: ST_AXIS_STATUS;
	nMasterAxisPosition AT %I* : DINT;
	nAdditivePositionSetpoiunt AT %Q* : DINT;
	fMasterAxisPosition : LREAL;
	fAdditivePositionSetpoint : LREAL;
	fDiffPosition :LREAL;
	dLatchedPosition AT %I*:DINT;
	eTargetState: TARGET_STATE_MACHINE;
	bExecute: BOOL := FALSE;
	bEnable:BOOL:=FALSE;
	bEnabled:BOOL:=FALSE;
	bReset:BOOL:=FALSE;
    fbModePhase:FB_ModePhasing;	
	fAccelerationDefault:LREAL:=0.005;
	fSetVelToDriveRaw:LREAL;
	bBrakeFreewheelOn AT %Q*: BOOL;
	bBrakeLockedOn AT %Q*: BOOL;
    inputDummy AT %I*: BOOL;
	inputDigSens1 AT %I*: BOOL;
	inputDigSens2 AT %I*: BOOL;

	fbBrakeTorque: FB_BrakeTorque;
	fBrakeSpNm:LREAL:=0;
	iBrakeSpRaw AT %Q* :INT:=0;
	
	//Temperature input from EL3214 Channel1
	iRotMotorTempRaw AT %I*: INT:=0;
	fRotMotorTempDegC:LREAL:=0;
	
	bBrakeLockOnCmd:BOOL:=FALSE;
	bFreeWheelOnOnCmd:BOOL:=TRUE;
	fActualTorque:LREAL:=0;
	fActualPosition:LREAL:=0;
	fActualVelocity:LREAL:=0;
	bError: BOOL:=FALSE;
	nErrorId:UDINT:=0;
	sErrorStr:STRING:='NO ERROR';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Enable Axis independent of state
stCommands.bEnableAxis :=bEnable;
stCommands.bHaltAxis :=bEnable;
bEnabled:=stStatus.bAxisEnabled;
stCommands.bCmd_ErrorReset:=bReset;

IF NOT bEnable THEN
  bExecute:=FALSE;
END_IF

stCommands.fCommandAcceleration:=fAccelerationDefault;
stCommands.fCommandDeceleration:=fAccelerationDefault;	

CASE eTargetState OF 
	TARGET_STATE_MACHINE.CONSTANT_VELOCITY:
		stCommands.eMotionMode :=e_Motion_mode.eJogPositive;
		stCommands.eOperationMode:=e_Operation_mode_no.eSecondaryOpMode2;
		//stCommands.fVelocityCommandValue:=0;		
	TARGET_STATE_MACHINE.POSITIONING:
		stCommands.eMotionMode :=e_Motion_mode.ePositioning;
		stCommands.eOperationMode:=e_Operation_mode_no.eSecondaryOpMode1;
	TARGET_STATE_MACHINE.PHASING:
   		fbModePhase(
			bExecute:=bExecute,
            bReset:=bReset,
			stStatus:=	stStatus,
			dLatchedPosition:=dLatchedPosition,	
			stCommands:=stCommands);
        //Reduce overshoot by lowering acc when closing in on setpoint 
        IF stStatus.fActualVelocity/10 > GVL_Parameters.fNominalSpeedRpm * 0.995  THEN
	        stCommands.fCommandAcceleration:= fAccelerationDefault;
			stCommands.fCommandDeceleration:=fAccelerationDefault;	
		ELSIF stStatus.fActualVelocity/10 > GVL_Parameters.fNominalSpeedRpm * 0.9  THEN	
			stCommands.fCommandAcceleration:= fAccelerationDefault*0.2;
			stCommands.fCommandDeceleration:=fAccelerationDefault*0.2;	
 	 	ELSIF stStatus.fActualVelocity/10 > GVL_Parameters.fNominalSpeedRpm * 0.80 THEN
 			stCommands.fCommandAcceleration:= fAccelerationDefault*0.35;
			stCommands.fCommandDeceleration:=fAccelerationDefault*0.35;	
  		ELSIF stStatus.fActualVelocity/10 > GVL_Parameters.fNominalSpeedRpm * 0.70 THEN
 			stCommands.fCommandAcceleration:= fAccelerationDefault*0.5;
			stCommands.fCommandDeceleration:=fAccelerationDefault*0.5;	
		ELSE
 			stCommands.fCommandAcceleration:= fAccelerationDefault;
			stCommands.fCommandDeceleration:=fAccelerationDefault;
 		END_IF
   		IF NOT bexecute THEN
			stCommands.fCommandAcceleration:= fAccelerationDefault*4;
			stCommands.fCommandDeceleration:=fAccelerationDefault*4;
		END_IF
END_CASE

IF NOT bExecute THEN
	stCommands.fVelocityCommandValue:=0;
END_IF

// Rexroth FB
fbIndraDrive(
	AmsNetId:= stAmsNetId, 
	AdsAddr_Port:= nPort, 
	stAxisCommands:= stCommands, 
	stDriveStatus:= , 
	stAxisStatus=> stStatus, 
	stDriveCommands=> );
	

// Calculate values for show in EPICS
fSetVelToDriveRaw:= DINT_TO_LREAL(MAIN.fbIndraDrive.stDriveCommands.nS40_VelocityCommandValue)/10000;	
fActualPosition:=stStatus.fActualPosition;
fActualTorque:=stStatus.fActualTorque;
fActualVelocity:=stStatus.fActualVelocity/10;
fRotMotorTempDegC:=iRotMotorTempRaw/10.0;

// Motor Temperature Monitoring
IF fRotMotorTempDegC >= GVL_Parameters.nMaxMotorTemperature THEN
	bEnable:= FALSE;
	bExecute:= FALSE;	
END_IF
	
// Control brake
ACT_Brake();

// Error Handling
IF eTargetState = TARGET_STATE_MACHINE.PHASING THEN
  IF fbModePhase.bError AND NOT bError THEN
	  bError:=fbModePhase.bError;
	  nErrorId:=fbModePhase.nErrorId;
	  sErrorStr:=fbModePhase.sErrorStr;
  END_IF
END_IF

IF bReset THEN
	bError:=FALSE;
	nErrorId:=GVL_ErrorCodes.nErrorCodeOKId;
	sErrorStr:=GVL_ErrorCodes.nErrorCodeOKStr;
END_IF


// Some parameters just for debugging	
	stCommands.bCmd_ActivateParameterMode;//True puts the drive in parameter mode
	stCommands.bCmd_DisableLimits;// True disables monitoring of errors
	stCommands.bCmd_DriveControlledHoming;// True starts homing procedure defined in the drive
	stCommands.bCmd_ErrorReset;
	stCommands.bCmd_ExitParameterMode;
	stCommands.bCmd_RunVirtualMater;// Jog command to the virtual master
	stCommands.bCmd_SetAbsolutePosition;
	stCommands.bCommandPositionChange;// Drive moves to the current target position, when bCommandVAlueAccept toggled, drive moves to the new target position
	stCommands.bCommandValueAccept;// Used in "Drive positioning Mode" to update the target position when toggled
	stCommands.bEnableAxis;
	stCommands.bHaltAxis;// Performs halt on the drive, bEnableaxis has to be TRUE
	stCommands.bPositionCommandValue;//0=Absolute;1=Relative
	stCommands.eMotionMode;
	stCommands.eOperationMode;
	stCommands.fCommandAcceleration;// Acceleration used for positioning and jogging
	stCommands.fCommandDeceleration;// Deceleration used for positioning and jogging
	stCommands.fCommandPosition;
	stCommands.fCommandVelocity;// Velocity used for positioning and jogging
	stCommands.fFeedrateOverride;// Parameter used for adjustment of the velocity (0,100)%
	stCommands.fTorqueLimit;
	stCommands.fVelocityCommandValue;// S40, velocity used for positining and jogging (in velocity mode)
	stStatus.bAxisEnabled;]]></ST>
    </Implementation>
    <Action Name="ACT_Brake" Id="{a8ef5cdf-33a2-41f9-b34e-1a95819e04c4}">
      <Implementation>
        <ST><![CDATA[//bBrakeFreewheelOn:=fBrakeSpNm=0;
bBrakeFreewheelOn:=bFreeWheelOnOnCmd;
bBrakeLockedOn:=bBrakeLockOnCmd;

fbBrakeTorque(iTorqueValueinNm:=fBrakeSpNm);
iBrakeSpRaw:=fbBrakeTorque.iTorqueScaled;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="856" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="724" Count="1" />
      <LineId Id="835" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="837" Count="0" />
      <LineId Id="836" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="216" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="813" Count="4" />
      <LineId Id="819" Count="15" />
      <LineId Id="126" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="123" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="8" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="666" Count="2" />
      <LineId Id="864" Count="0" />
      <LineId Id="867" Count="4" />
      <LineId Id="866" Count="0" />
      <LineId Id="669" Count="0" />
      <LineId Id="768" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="839" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="845" Count="1" />
      <LineId Id="848" Count="0" />
      <LineId Id="917" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="840" Count="0" />
      <LineId Id="854" Count="1" />
      <LineId Id="916" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="918" Count="22" />
      <LineId Id="275" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.ACT_Brake">
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>