<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_ModePhasing" Id="{d2a3a91d-9b2d-4e1e-8e68-2aba1e8abe60}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModePhasing
VAR_INPUT
	bExecute:BOOL;
	bReset: BOOL;
	stStatus: ST_AXIS_STATUS;
    dLatchedPosition: DINT;
	fPhaseOffsetDeg: LREAL;
    fPhaseControlKp: LREAL := 0.0012;
	fPhaseControlKi: LREAL := 0.00015;
	fPhaseControlKd: LREAL := 0.0;
	fPhaseControlKff: LREAL := 0.0;
	bPhaseControlReset: BOOL := FALSE;
END_VAR
VAR_OUTPUT
	bError: BOOL;
	nErrorId: UDINT;
	sErrorStr: STRING:=GVL_ErrorCodes.nErrorCodeOKStr;
	bPhasing:BOOL;
	fSpeedSetpoint: LREAL;
	fCtrlOutput:LREAL;
END_VAR
VAR_IN_OUT
	stCommands: ST_AXIS_COMMAND;
END_VAR
VAR
	fLatchedPositionOld: LREAL;
	fDistBetweenLastPulses: LREAL;
	fLastSectorVelocity: LREAL;
	fVelocityFromDriveScaled: LREAL;
	fClosestSectorId: LREAL;
	nClosestSectorId: INT;
	fLatchedPosition:LREAL;
	//fbPhasePID: Tc2_Utilities.FB_BasicPID;
	fbPhasePID: FB_PID;
	fPhaseError: LREAL;
	fPhaseErrorFiltered:LREAL;
	fPhaseErrorMM: LREAL:=0;
	dLatchedPositionOld:DINT;
	fPhaseErrorAcc:LREAL;
	ii: INT;
	bTestReset: BOOL;
	bNewTriggPulse:BOOL:=FALSE;
	fArrayFiltVelo: ARRAY[ 0 ..35] OF LREAL;
	fArrayPhaseErrorFilt: ARRAY[ 0 ..99] OF LREAL;
	fArrayPhaseErrorLongTime: ARRAY[ 0 ..99] OF LREAL;
	iFiltVeloArrayIndex:INT:=0;
	fLastSectorVelocityOld:LREAL:=0;
	i:INT:=0;
	fMaxValue:LREAL:=0;
	fMinValue:LREAL:=0;
	fRange:LREAL:=0;
	iRangeOKCounter:INT:=0;
	iRangeOKCounterOld:INT:=0;
	nChoosenSector:INT:=0;
	bPhaseAlgTrigg: BOOL;
	fbPWM: FB_PWM;
	fbSuperImpose:FB_TargetSuperImpose;
	bExecuteSuperImpose: BOOL;
	fPhaseErrorSlope: LREAL;
	iNominalVelCounter:INT:=0;
	fDeltaVelo: LREAL;
	bVeloStable:BOOL:=FALSE;
	timerCheckLatchFreq:TON;
	fNomSpeedSetAdjust: LREAL := 0;
	bTEst: BOOL := FALSE;
	fPidAdd: LREAL := 0;
	fCtrlCycleTime: INT;
	fTn: INT;
	nPIDExeSkipCounter:INT:=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Function: 
// 1. Wait for stable velocity then start "phasing" 
// 2. Choose sector for control
// 3. Calculate phase error (buffer several revs and filter)
// 4. Adjust velo setpoint to minimize phase error (PID)
// 5. PWM of the new velocity setpoint in order to increase resolution
// Note: Seem the indra drive can only hanlde 3 decimals (even if 4 is seen in interface and indradrive software)
// Author: Anders Sandström 2018

stCommands.fCommandDeceleration:=GVL_Parameters.fAccDefault;	
stCommands.fCommandAcceleration:= GVL_Parameters.fAccDefault;
stCommands.eMotionMode :=e_Motion_mode.eJogPositive;
stCommands.eOperationMode:=e_Operation_mode_no.eSecondaryOpMode2;
fVelocityFromDriveScaled:=stStatus.fActualVelocity/10;
bNewTriggPulse:=FALSE;
bPhasing:=FALSE;
fNomSpeedSetAdjust:=GVL_Parameters.fNominalSpeedRpm + GVL_Parameters.fNominalSpeedAdjust; // Adjust speed setpoint
bPhasing:=bPhaseAlgTrigg;

// Reset alg
IF NOT bExecute OR bPhaseControlReset THEN
 bPhaseAlgTrigg:=FALSE;
END_IF

fLatchedPositionOld:=fLatchedPosition;
fLatchedPosition:=DINT_TO_LREAL(dLatchedPosition)/10000.0;

// New trigger from timing system
IF (fLatchedPosition-fLatchedPositionOld)<>0 THEN
  IF(fLatchedPositionOld>fLatchedPosition) THEN
	fDistBetweenLastPulses:=(360-fLatchedPositionOld+fLatchedPosition);
  ELSE
	fDistBetweenLastPulses:=fLatchedPosition-fLatchedPositionOld;
  END_IF
  bNewTriggPulse:=TRUE;
  fLastSectorVelocity:=fDistBetweenLastPulses*GVL_Parameters.nPulseFreqHz*60/360;
  nClosestSectorId:= LREAL_TO_INT(fLatchedPosition/10);
  
  // Check if stable velocity (close to nominal)	
  iRangeOKCounterOld:=iRangeOKCounter;
  fArrayFiltVelo[iFiltVeloArrayIndex]:=fLastSectorVelocity;
  iFiltVeloArrayIndex:=iFiltVeloArrayIndex+1;
  IF iFiltVeloArrayIndex>35 THEN
	iFiltVeloArrayIndex:=0;
  END_IF
  fLastSectorVelocityOld:=fLastSectorVelocity;
  fMaxValue:=fArrayFiltVelo[0];
  fMinValue:=fArrayFiltVelo[0];
  FOR i:=1 TO 35 BY 1 DO
     IF fArrayFiltVelo[i]> fMaxValue THEN
	   fMaxValue:=fArrayFiltVelo[i];  
     END_IF
     IF fArrayFiltVelo[i]< fMinValue THEN
	   fMinValue:=fArrayFiltVelo[i];  
     END_IF
  END_FOR;
  fRange:=fMaxValue-fMinValue;
  IF fRange < GVL_Parameters.fPhaseSpeedTol AND 
     ABS(fNomSpeedSetAdjust-fMinValue) < GVL_Parameters.fPhaseSpeedTol AND  
     ABS(fNomSpeedSetAdjust-fMaxValue) < GVL_Parameters.fPhaseSpeedTol THEN
	IF iRangeOKCounter <= GVL_Parameters.nVeloInRangeCount THEN
      iRangeOKCounter:=iRangeOKCounter+1;
	END_IF
  ELSE
	iRangeOKCounter:=0; 
  END_IF
  bVeloStable:=iRangeOKCounter >= GVL_Parameters.nVeloInRangeCount;
  IF bVeloStable AND NOT bPhaseAlgTrigg (*AND bTEst*) THEN
    nChoosenSector:=nClosestSectorId-1;
    bPhaseAlgTrigg:=TRUE;
    MEMSET(destAddr:=ADR(fArrayPhaseErrorFilt[0]),0,SIZEOF(fArrayPhaseErrorFilt));
    fPhaseErrorFiltered:=0;
  END_IF
END_IF

//Ensure that pulses arrive from timing system when velocity is above certain limit
timerCheckLatchFreq(IN:=fLatchedPosition = fLatchedPositionOld AND ABS(stStatus.fActualVelocity)>0,PT:=LREAL_TO_TIME(1000/GVL_Parameters.nPulseFreqHz*2));

IF NOT bPhaseAlgTrigg THEN
  fPhaseError:=nClosestSectorId*10-fLatchedPosition;
END_IF

IF bNewTriggPulse THEN
  nChoosenSector:=nChoosenSector+1;
  IF nChoosenSector > 35 THEN
    nChoosenSector:=0;
  END_IF	
END_IF

// Calculate phase error
IF bPhaseAlgTrigg THEN
  fPhaseError:=nChoosenSector*10-fLatchedPosition;
  IF fPhaseError >=180 THEN
	fPhaseError:=360-fPhaseError;
  ELSIF fPhaseError<-180 THEN
	fPhaseError:=fPhaseError+360;
  END_IF
ELSE
  fPhaseError:=nClosestSectorId*10-fLatchedPosition;
END_IF
fPhaseErrorMM:=fPhaseError*GVL_Parameters.fWheelDiameter*pi/360.0; 

//Filter phase error
IF bNewTriggPulse THEN
	MEMMOVE(destAddr:=ADR(fArrayPhaseErrorFilt[1]),srcAddr:=ADR(fArrayPhaseErrorFilt[0]),SIZEOF(LREAL)*(GVL_Parameters.nPhaseErrorFilterSize-1));
	fArrayPhaseErrorFilt[0]:=fPhaseErrorMM;
	fPhaseErrorFiltered:=0;
	FOR ii := 0 TO (GVL_Parameters.nPhaseErrorFilterSize-1) DO
		fPhaseErrorFiltered:=fPhaseErrorFiltered+fArrayPhaseErrorFilt[ii];
	END_FOR
	fPhaseErrorFiltered:=fPhaseErrorFiltered/GVL_Parameters.nPhaseErrorFilterSize;
END_IF

IF NOT fbSuperImpose.bBusy  THEN
  bExecuteSuperImpose:= NOT bExecuteSuperImpose;
END_IF

//Limit output velocity difference from nominal
IF(fPhaseErrorFiltered > 0) THEN  //Pos error
  IF ABS(fPhaseErrorFiltered)>15 THEN
    fDeltaVelo:= 0.005;
  ELSIF ABS(fPhaseErrorFiltered)>4 THEN
    fDeltaVelo:= 0.003;
  ELSIF ABS(fPhaseErrorFiltered)>1 THEN
    fDeltaVelo:= 0.003;
  ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
    fDeltaVelo:= 0.003;
  ELSE
	fDeltaVelo:= 0.002;
  END_IF
ELSE // neg error
  IF ABS(fPhaseErrorFiltered)>15 THEN  
    fDeltaVelo:= 0.005;
  ELSIF ABS(fPhaseErrorFiltered)>4 THEN
    fDeltaVelo:= 0.003;
  ELSIF ABS(fPhaseErrorFiltered)>1 THEN
    fDeltaVelo:= 0.003;
  ELSIF ABS(fPhaseErrorFiltered)>0.5 THEN
    fDeltaVelo:= 0.003;
  ELSE
	fDeltaVelo:= 0.002;
  END_IF	
END_IF

//Adjust nominal speed (this function should be automated (adaptive))
fSpeedSetpoint:=fNomSpeedSetAdjust;
IF fSpeedSetpoint>GVL_Parameters.fMaximumSPeedRpm THEN
  fSpeedSetpoint:=GVL_Parameters.fMaximumSPeedRpm; 
END_IF
IF NOT bExecute THEN
  fSpeedSetpoint:=0;	
END_IF
IF bNewTriggPulse AND bPhaseAlgTrigg THEN

  nPIDExeSkipCounter:=nPIDExeSkipCounter + 1;
  IF nPIDExeSkipCounter >= GVL_Parameters.nPhasePIDReducedSampleRateFactor THEN
    nPIDExeSkipCounter:=0;
    fbPhasePID(fSetpointValue:=0,
               fActualValue := fPhaseErrorFiltered,
               bReset       := bPhaseControlReset,
		  	   fFF          := 0,
			   fKp          := fPhaseControlKp,
			   fKi          := fPhaseControlKi,
			   fKd          := fPhaseControlKd,
			   fKff         := fPhaseControlKff,
			   fIOutputMin  :=-fDeltaVelo*0.65,
			   fIOutputMax  := fDeltaVelo*0.65,
			   fOutputMin   := -fDeltaVelo,
			   fOutputMax   := fDeltaVelo,
			   );
    fPidAdd:=fbPhasePID.fCtrlOutput;
  END_IF

ELSIF NOT bPhaseAlgTrigg THEN
  fbPhasePID(bReset:=TRUE);
  fPidAdd:=0;
END_IF

fbSuperImpose(bExecute:=bExecuteSuperImpose AND bPhaseAlgTrigg,
      iSampleRateMs:=GVL_Parameters.nTaskSampleTime,
      fNominalVelocityRpm:=fSpeedSetpoint,
      fMaxDeltaVelocityRpm:=fDeltaVelo,
      fPhaseErrorDeg:=fPhaseErrorFiltered/(GVL_Parameters.fWheelDiameter*pi)*360);  

fbPWM(
       En:=TRUE,
       bEnable:=TRUE,
       iBlockSampleTimeMicroS:=GVL_Parameters.nTaskSampleTime*1000,
       iProcessSampleTimeMicroS:=71000*GVL_Parameters.nPhasePIDReducedSampleRateFactor,
       iDecimalPoint:=3,
       fInput:=fSpeedSetpoint+fPidAdd);

fSpeedSetpoint:=fbPWM.fOutput;
dLatchedPositionOld:=dLatchedPosition;
 
//*********Errorhandling

// Latched pulses missing
IF timerCheckLatchFreq.Q THEN
	bError:=TRUE;
	nErrorId:=GVL_ErrorCodes.nErrorNoLatchId;
	sErrorStr:=GVL_ErrorCodes.sErrorNoLatchStr;
END_IF

IF bReset THEN
	bError:=FALSE;
	nErrorId:=0;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_ModePhasing">
      <LineId Id="1065" Count="0" />
      <LineId Id="1070" Count="2" />
      <LineId Id="1067" Count="0" />
      <LineId Id="1330" Count="1" />
      <LineId Id="948" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1083" Count="1" />
      <LineId Id="1050" Count="0" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1150" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1118" Count="0" />
      <LineId Id="55" Count="5" />
      <LineId Id="1047" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1121" Count="0" />
      <LineId Id="1116" Count="0" />
      <LineId Id="1090" Count="25" />
      <LineId Id="1089" Count="0" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1124" Count="3" />
      <LineId Id="1129" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="411" Count="2" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="1133" Count="2" />
      <LineId Id="342" Count="1" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="348" Count="1" />
      <LineId Id="354" Count="1" />
      <LineId Id="350" Count="0" />
      <LineId Id="1141" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="521" Count="1" />
      <LineId Id="942" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="943" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="1333" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="931" Count="1" />
      <LineId Id="929" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="946" Count="1" />
      <LineId Id="548" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="964" Count="10" />
      <LineId Id="963" Count="0" />
      <LineId Id="1162" Count="7" />
      <LineId Id="551" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1327" Count="0" />
      <LineId Id="1325" Count="0" />
      <LineId Id="1305" Count="1" />
      <LineId Id="1302" Count="0" />
      <LineId Id="1308" Count="0" />
      <LineId Id="1315" Count="5" />
      <LineId Id="1322" Count="1" />
      <LineId Id="1307" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1328" Count="0" />
      <LineId Id="1289" Count="0" />
      <LineId Id="1299" Count="0" />
      <LineId Id="1321" Count="0" />
      <LineId Id="1300" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="516" Count="3" />
      <LineId Id="1280" Count="0" />
      <LineId Id="1273" Count="5" />
      <LineId Id="1272" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="1043" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="714" Count="0" />
      <LineId Id="713" Count="0" />
      <LineId Id="700" Count="1" />
      <LineId Id="703" Count="0" />
      <LineId Id="782" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="708" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>